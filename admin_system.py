"""
–°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –¥–ª—è –±–æ—Ç–∞
"""

from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import asyncio
from db import (
    get_all_user_ids, get_user_name, get_hearts, get_points, get_level,
    get_streak_days, get_total_messages, is_banned, ban_user, unset_ban,
    get_user_trial_status, set_user_trial_status, grant_access
)
from logger import bot_logger
from config import config

class AdminSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    
    def __init__(self):
        self.admin_username = "d_kolesov"  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω
        self.admin_commands = {
            "stats": self.get_bot_statistics,
            "users": self.get_users_list,
            "user": self.get_user_info,
            "ban": self.ban_user_command,
            "unban": self.unban_user_command,
            "grant": self.grant_access_command,
            "trial": self.manage_trial_command,
            "broadcast": self.broadcast_message,
            "help": self.get_admin_help
        }
    
    def is_admin(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return username == self.admin_username
    
    async def get_bot_statistics(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = await get_all_user_ids()
            total_users = len(all_users)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            active_users = 0
            total_messages = 0
            total_hearts = 0
            total_points = 0
            
            for user_id in all_users:
                try:
                    messages = await get_total_messages(user_id)
                    hearts = await get_hearts(user_id)
                    points = await get_points(user_id)
                    
                    total_messages += messages
                    total_hearts += hearts
                    total_points += points
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º)
                    if messages > 0:
                        active_users += 1
                        
                except Exception as e:
                    bot_logger.log_system_error(e, f"Error getting stats for user {user_id}")
                    continue
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
            premium_users = 0
            trial_users = 0
            
            for user_id in all_users:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
                    access_info = await grant_access(user_id, 0)
                    if access_info and access_info.get('has_access', False):
                        premium_users += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å
                    trial_status = await get_user_trial_status(user_id)
                    if trial_status == "active":
                        trial_users += 1
                        
                except Exception as e:
                    continue
            
            stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}
‚Ä¢ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}
‚Ä¢ –ü—Ä–æ–±–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {trial_users}

üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–¥–µ—á–µ–∫: {total_hearts}
‚Ä¢ –í—Å–µ–≥–æ –æ—á–∫–æ–≤ –±–ª–∏–∑–æ—Å—Ç–∏: {total_points}

‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:
‚Ä¢ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 2.0.0
‚Ä¢ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
"""
            return stats_text
            
        except Exception as e:
            bot_logger.log_system_error(e, "Failed to get bot statistics")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    async def get_users_list(self, limit: int = 20) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            all_users = await get_all_user_ids()
            total_users = len(all_users)
            
            users_text = f"üë• –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–ø–æ–∫–∞–∑–∞–Ω–æ {min(limit, total_users)} –∏–∑ {total_users})\n\n"
            
            for i, user_id in enumerate(all_users[:limit]):
                try:
                    username = await get_user_name(user_id)
                    messages = await get_total_messages(user_id)
                    hearts = await get_hearts(user_id)
                    level = await get_level(user_id)
                    banned = await is_banned(user_id)
                    
                    status = "üî¥ –ó–∞–±–∞–Ω–µ–Ω" if banned else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
                    username_display = username if username else f"ID: {user_id}"
                    
                    users_text += f"{i+1}. {username_display}\n"
                    users_text += f"   ID: {user_id} | –°–æ–æ–±—â–µ–Ω–∏–π: {messages} | –°–µ—Ä–¥–µ—á–∫–∏: {hearts} | –£—Ä–æ–≤–µ–Ω—å: {level}\n"
                    users_text += f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"
                    
                except Exception as e:
                    users_text += f"{i+1}. ID: {user_id} (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)\n\n"
                    continue
            
            if total_users > limit:
                users_text += f"... –∏ –µ—â–µ {total_users - limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            return users_text
            
        except Exception as e:
            bot_logger.log_system_error(e, "Failed to get users list")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    async def get_user_info(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            username = await get_user_name(user_id)
            messages = await get_total_messages(user_id)
            hearts = await get_hearts(user_id)
            points = await get_points(user_id)
            level = await get_level(user_id)
            streak = await get_streak_days(user_id)
            banned = await is_banned(user_id)
            trial_status = await get_user_trial_status(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
            access_info = await grant_access(user_id, 0)
            has_premium = access_info and access_info.get('has_access', False)
            
            user_text = f"""
üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï

üÜî ID: {user_id}
üë§ –ò–º—è: {username if username else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üî¥ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–∞–Ω–µ–Ω' if banned else '–ê–∫—Ç–∏–≤–µ–Ω'}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {messages}
‚Ä¢ –°–µ—Ä–¥–µ—á–∫–∏: {hearts}
‚Ä¢ –û—á–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏: {points}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}
‚Ä¢ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streak}

üíé –î–æ—Å—Ç—É–ø:
‚Ä¢ –ü—Ä–µ–º–∏—É–º: {'‚úÖ –î–∞' if has_premium else '‚ùå –ù–µ—Ç'}
‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å: {trial_status if trial_status else '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}

‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
"""
            return user_text
            
        except Exception as e:
            bot_logger.log_system_error(e, f"Failed to get user info for {user_id}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}"
    
    async def ban_user_command(self, user_id: int, reason: str = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª") -> str:
        """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if await is_banned(user_id):
                return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω"
            
            await ban_user(user_id, reason)
            bot_logger.log_admin_action("ban_user", {"user_id": user_id, "reason": reason})
            
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            
        except Exception as e:
            bot_logger.log_system_error(e, f"Failed to ban user {user_id}")
            return f"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    
    async def unban_user_command(self, user_id: int) -> str:
        """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not await is_banned(user_id):
                return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω"
            
            await unset_ban(user_id)
            bot_logger.log_admin_action("unban_user", {"user_id": user_id})
            
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω"
            
        except Exception as e:
            bot_logger.log_system_error(e, f"Failed to unban user {user_id}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    
    async def grant_access_command(self, user_id: int, days: int) -> str:
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await grant_access(user_id, days)
            bot_logger.log_admin_action("grant_access", {"user_id": user_id, "days": days})
            
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ {days} –¥–Ω–µ–π"
            
        except Exception as e:
            bot_logger.log_system_error(e, f"Failed to grant access to user {user_id}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
    
    async def manage_trial_command(self, user_id: int, action: str) -> str:
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–Ω—ã–º –¥–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if action == "reset":
                await set_user_trial_status(user_id, None)
                return f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω"
            elif action == "activate":
                await set_user_trial_status(user_id, "active")
                return f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            elif action == "deactivate":
                await set_user_trial_status(user_id, "used")
                return f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            else:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: reset, activate, deactivate"
                
        except Exception as e:
            bot_logger.log_system_error(e, f"Failed to manage trial for user {user_id}")
            return f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–Ω—ã–º –¥–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    
    async def broadcast_message(self, message: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            all_users = await get_all_user_ids()
            success_count = 0
            error_count = 0
            
            for user_id in all_users:
                try:
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    bot_logger.log_info(f"Broadcast to {user_id}: {message}")
                    success_count += 1
                except Exception as e:
                    error_count += 1
                    continue
            
            bot_logger.log_admin_action("broadcast", {
                "message": message[:100],
                "success_count": success_count,
                "error_count": error_count
            })
            
            return f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}"
            
        except Exception as e:
            bot_logger.log_system_error(e, "Failed to broadcast message")
            return "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    def get_admin_help(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
üõ†Ô∏è –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –°–ü–†–ê–í–ö–ê

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ `/admin stats` - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
‚Ä¢ `/admin users [–ª–∏–º–∏—Ç]` - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `/admin user <ID>` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ `/admin ban <ID> [–ø—Ä–∏—á–∏–Ω–∞]` - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/admin unban <ID>` - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:
‚Ä¢ `/admin grant <ID> <–¥–Ω–∏>` - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø
‚Ä¢ `/admin trial <ID> <–¥–µ–π—Å—Ç–≤–∏–µ>` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω—ã–º –¥–Ω–µ–º
  –î–µ–π—Å—Ç–≤–∏—è: reset, activate, deactivate

üì¢ –†–∞—Å—Å—ã–ª–∫–∏:
‚Ä¢ `/admin broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>` - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

‚ùì –ü–æ–º–æ—â—å:
‚Ä¢ `/admin help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ `/admin stats`
‚Ä¢ `/admin users 10`
‚Ä¢ `/admin user 123456789`
‚Ä¢ `/admin ban 123456789 –°–ø–∞–º`
‚Ä¢ `/admin grant 123456789 30`
‚Ä¢ `/admin trial 123456789 reset`
"""
        return help_text
    
    async def process_admin_command(self, command: str, args: List[str]) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—É"""
        try:
            if command not in self.admin_commands:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n\n{self.get_admin_help()}"
            
            if command == "stats":
                return await self.admin_commands[command]()
            elif command == "users":
                limit = int(args[0]) if args and args[0].isdigit() else 20
                return await self.admin_commands[command](limit)
            elif command == "user":
                if not args:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                user_id = int(args[0])
                return await self.admin_commands[command](user_id)
            elif command == "ban":
                if not args:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                user_id = int(args[0])
                reason = " ".join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
                return await self.admin_commands[command](user_id, reason)
            elif command == "unban":
                if not args:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                user_id = int(args[0])
                return await self.admin_commands[command](user_id)
            elif command == "grant":
                if len(args) < 2:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"
                user_id = int(args[0])
                days = int(args[1])
                return await self.admin_commands[command](user_id, days)
            elif command == "trial":
                if len(args) < 2:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–π—Å—Ç–≤–∏–µ"
                user_id = int(args[0])
                action = args[1]
                return await self.admin_commands[command](user_id, action)
            elif command == "broadcast":
                if not args:
                    return "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
                message = " ".join(args)
                return await self.admin_commands[command](message)
            elif command == "help":
                return self.admin_commands[command]()
            else:
                return await self.admin_commands[command]()
                
        except ValueError:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
        except Exception as e:
            bot_logger.log_system_error(e, f"Failed to process admin command: {command}")
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
admin_system = AdminSystem()
