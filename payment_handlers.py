"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from payment_system import payment_processor, PaymentPlans, PaymentType
from locales import locale_manager, Language
from logger import bot_logger, log_performance
from error_handler import handle_errors, handle_telegram_errors
from validation import validator
from rate_limiter import rate_limiter

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
payment_router = Router()

class PaymentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    selecting_plan = State()
    confirming_payment = State()
    processing_payment = State()

@payment_router.callback_query(F.data == "shop")
@handle_errors
@handle_telegram_errors
async def shop_callback_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(callback.from_user.id, 'callback'):
        await callback.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    bot_logger.log_callback(callback.from_user.id, "shop")
    
    await state.set_state(PaymentStates.selecting_plan)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏
    keyboard = create_plans_keyboard()
    
    shop_text = locale_manager.get_text("shop_welcome") if locale_manager.get_text("shop_welcome") != "shop_welcome" else "üõí –ú–∞–≥–∞–∑–∏–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
    
    await callback.message.edit_text(
        shop_text,
        reply_markup=keyboard
    )
    await callback.answer()

@payment_router.callback_query(F.data.startswith("plan_"))
@handle_errors
@handle_telegram_errors
async def plan_selection_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞."""
    
    plan_id = callback.data.replace("plan_", "")
    plan = PaymentPlans.get_plan(plan_id)
    
    if not plan:
        await callback.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(callback.from_user.id, 'callback'):
        await callback.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    bot_logger.log_callback(callback.from_user.id, f"plan_selected_{plan_id}")
    
    await state.set_state(PaymentStates.confirming_payment)
    await state.update_data(selected_plan=plan_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–ª–∞–Ω–∞
    plan_text = f"""
üí≥ {plan.name}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {plan.amount:.0f} ‚ÇΩ
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {plan.description}

üéÅ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
"""
    
    for benefit in plan.benefits:
        plan_text += f"‚Ä¢ {benefit}\n"
    
    plan_text += f"\nüí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooMoney (–ÆMoney)"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{plan_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
        ]
    )
    
    await callback.message.edit_text(
        plan_text,
        reply_markup=keyboard
    )
    await callback.answer()

@payment_router.callback_query(F.data.startswith("pay_"))
@handle_errors
@handle_telegram_errors
@log_performance("payment_creation")
async def payment_confirmation_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."""
    
    plan_id = callback.data.replace("pay_", "")
    plan = PaymentPlans.get_plan(plan_id)
    
    if not plan:
        await callback.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(callback.from_user.id, 'callback'):
        await callback.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    bot_logger.log_callback(callback.from_user.id, f"payment_confirmed_{plan_id}")
    
    await state.set_state(PaymentStates.processing_payment)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_result = await payment_processor.create_payment(
            user_id=callback.from_user.id,
            plan_id=plan_id
        )
        
        if not payment_result["success"]:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
                    ]
                )
            )
            await callback.answer()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_text = f"""
üí≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω

üí∞ –°—É–º–º–∞: {payment_result['amount']:.0f} ‚ÇΩ
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {payment_result['description']}

üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
{payment_result.get('confirmation_url', '–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ')}

‚è∞ –ü–ª–∞—Ç–µ–∂ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
"""
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{payment_result['payment_id']}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment_result['payment_id']}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
            ]
        )
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Payment creation failed for user {callback.from_user.id}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
                ]
            )
        )
        await callback.answer()

@payment_router.callback_query(F.data.startswith("check_payment_"))
@handle_errors
@handle_telegram_errors
async def check_payment_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞."""
    
    payment_id = callback.data.replace("check_payment_", "")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(callback.from_user.id, 'callback'):
        await callback.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment_info = await payment_processor.payment_manager.check_payment_status(payment_id)
        
        if payment_info["paid"]:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            result = await payment_processor.process_payment_success(
                user_id=callback.from_user.id,
                payment_id=payment_id
            )
            
            if result["success"]:
                success_text = f"""
‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üéÅ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã:
"""
                for benefit in result["benefits_applied"]:
                    success_text += f"‚Ä¢ {benefit}\n"
                
                success_text += "\nüíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
                
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                )
                
                await callback.message.edit_text(
                    success_text,
                    reply_markup=keyboard
                )
            else:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
        else:
            status_text = f"""
‚è≥ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞

üí∞ –°—É–º–º–∞: {payment_info['amount']['value']} {payment_info['amount']['currency']}
üìä –°—Ç–∞—Ç—É—Å: {payment_info['status']}
‚è∞ –°–æ–∑–¥–∞–Ω: {payment_info['created_at']}

üí≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É.
"""
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment_{payment_id}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
                ]
            )
            
            await callback.message.edit_text(
                status_text,
                reply_markup=keyboard
            )
        
        await callback.answer()
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Payment check failed for user {callback.from_user.id}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@payment_router.callback_query(F.data.startswith("cancel_payment_"))
@handle_errors
@handle_telegram_errors
async def cancel_payment_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞."""
    
    payment_id = callback.data.replace("cancel_payment_", "")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(callback.from_user.id, 'callback'):
        await callback.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
        return
    
    try:
        # –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        result = await payment_processor.cancel_payment(
            user_id=callback.from_user.id,
            payment_id=payment_id
        )
        
        if result["success"]:
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
                    ]
                )
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )
        
        await callback.answer()
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Payment cancellation failed for user {callback.from_user.id}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@payment_router.callback_query(F.data == "back_to_shop")
@handle_errors
@handle_telegram_errors
async def back_to_shop_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω."""
    
    await state.set_state(PaymentStates.selecting_plan)
    
    keyboard = create_plans_keyboard()
    shop_text = "üõí –ú–∞–≥–∞–∑–∏–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
    
    await callback.message.edit_text(
        shop_text,
        reply_markup=keyboard
    )
    await callback.answer()

def create_plans_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏"""
    plan = PaymentPlans.get_plan("premium_month")
    
    if not plan:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
        )
    
    buttons = [
        [InlineKeyboardButton(
            text=f"{plan.name} - {plan.amount:.0f} ‚ÇΩ",
            callback_data=f"plan_{plan.id}"
        )],
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="main_menu"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)
