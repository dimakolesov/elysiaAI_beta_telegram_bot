"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ —Å–∏–º–ø–∞—Ç–∏–∏ –¥–ª—è –≠–ª–∏–∑–∏–∏
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
"""

import re
import random
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from enum import Enum

from db import (
    get_points, add_points, get_streak_days, get_total_messages,
    get_achievements, get_relationship_level, get_user_name,
    get_days_active, update_days_active
)

class InteractionType(Enum):
    COMPLIMENT = "compliment"
    QUESTION = "question"
    STORY = "story"
    GAME = "game"
    HELP = "help"
    RUDE = "rude"
    IGNORE = "ignore"
    PERSONAL = "personal"
    ROMANTIC = "romantic"
    SUPPORT = "support"

class SympathySystem:
    def __init__(self):
        # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—á–∫–æ–≤
        self.base_points = {
            InteractionType.COMPLIMENT: 5,
            InteractionType.QUESTION: 2,
            InteractionType.STORY: 8,
            InteractionType.GAME: 10,
            InteractionType.HELP: 6,
            InteractionType.PERSONAL: 12,
            InteractionType.ROMANTIC: 15,
            InteractionType.SUPPORT: 10,
            InteractionType.RUDE: -15,
            InteractionType.IGNORE: -3
        }
        
        # –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (—Ç—Ä–µ–±—É–µ–º—ã–µ –æ—á–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è)
        self.levels = {
            1: 0, 2: 50, 3: 120, 4: 210, 5: 320,
            6: 450, 7: 600, 8: 770, 9: 960, 10: 1170
        }
        
        # –ì—Ä—É–±—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
        self.rude_patterns = [
            r'\b(–¥—É—Ä–∞–∫|–∏–¥–∏–æ—Ç|—Ç—É–ø–æ–π|–¥–µ–±–∏–ª|–º—É–¥–∞–∫|—Å–≤–æ–ª–æ—á—å|—Ç–≤–∞—Ä—å|—Å—É–∫–∞|–±–ª—è—Ç—å|—Ö—É–π|–ø–∏–∑–¥–∞)\b',
            r'\b(–æ—Ç—Å—Ç–∞–Ω—å|–æ—Ç–≤–∞–ª–∏|–∑–∞—Ç–∫–Ω–∏—Å—å|–∑–∞–≤–∞–ª–∏—Å—å|–ø–æ—à—ë–ª –Ω–∞—Ö—É–π|–Ω–∞—Ö—Ä–µ–Ω)\b',
            r'\b(–Ω–µ–Ω–∞–≤–∏–∂—É|–±–µ—Å–∏—à—å|—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—à—å|–Ω–∞–¥–æ–µ–ª|–¥–æ—Å—Ç–∞–ª)\b',
            r'\b(—É—Ä–æ–¥|—É—Ä–æ–¥–∏–Ω–∞|—Å—Ç—Ä–∞—à–Ω–∞—è|–∂–∏—Ä–Ω–∞—è|–¥—Ä—è–Ω—å)\b',
            r'\b(–∑–∞–µ–±–∞–ª|–∑–∞–µ–±–∞–ª–∞|–∑–∞–µ–±–∞–ª—Å—è|–∑–∞–µ–±–∞–ª–∞—Å—å)\b',
            r'\b(–≥–æ–≤–Ω–æ|–¥–µ—Ä—å–º–æ|—Ö—É–π–Ω—è|–ø–∏–∑–¥–µ—Ü)\b'
        ]
        
        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        self.compliment_words = [
            '–∫—Ä–∞—Å–∏–≤', '–º–∏–ª', '—É–º–Ω', '–Ω—Ä–∞–≤', '–ª—é–±', '–ø—Ä–µ–∫—Ä–∞—Å–Ω', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω',
            '—á—É–¥–µ—Å–Ω', '–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω', '–æ–±–æ–∂–∞—é', '–æ–±–æ–∂–∞–µ—à—å', '–æ–±–æ–∂–∞–µ—Ç',
            '—Å–∏–º–ø–∞—Ç–∏—á–Ω', '–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω', '–æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω', '–º–∏–ª–∞—à–∫', '–∫—Ä–∞—Å–æ—Ç–∫'
        ]
        
        self.romantic_words = [
            '–ª—é–±', '—Ü–µ–ª—É—é', '–æ–±–Ω–∏–º–∞—é', '–º–∏–ª', '–¥–æ—Ä–æ–≥', '—Å–ª–∞–¥–∫', '–Ω–µ–∂–Ω',
            '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω', '–≤–ª—é–±', '—Å–µ—Ä–¥—Ü–µ', '–¥—É—à', '–ø–æ—Ü–µ–ª—É–π', '–æ–±—ä—è—Ç–∏—è'
        ]
        
        self.personal_words = [
            '—Å–µ–∫—Ä–µ—Ç', '–¥–æ–≤–µ—Ä', '–ª–∏—á–Ω', '–∏–Ω—Ç–∏–º–Ω', '–ø—Ä–∏–≤–∞—Ç–Ω', '—Ç–∞–π–Ω',
            '—Ä–∞—Å—Å–∫–∞–∂', '–ø–æ–¥–µ–ª', '–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω', '—á–µ—Å—Ç–Ω', '–ø—Ä–∞–≤–¥'
        ]
        
        self.support_words = [
            '–ø–æ–¥–¥–µ—Ä–∂', '–ø–æ–º–æ–≥', '—Å–æ–≤–µ—Ç', '–ø–æ–¥—Å–∫–∞–∂', '—É—Ç–µ—à', '—É—Å–ø–æ–∫',
            '–≤—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ', '–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π', '—è —Å —Ç–æ–±–æ–π', '–≤–º–µ—Å—Ç–µ'
        ]

    def detect_rude_behavior(self, message: str) -> bool:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥—Ä—É–±–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        message_lower = message.lower()
        for pattern in self.rude_patterns:
            if re.search(pattern, message_lower):
                return True
        return False

    async def calculate_points_with_complexity(self, user_id: int, interaction_type: InteractionType) -> int:
        """–†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        base_points = self.base_points[interaction_type]
        level = await self.get_user_level(user_id)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: —á–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º —Å–ª–æ–∂–Ω–µ–µ –ø–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏
        difficulty_modifier = max(0.3, 1.0 - (level * 0.08))
        
        # –°–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–æ—Ç -20% –¥–æ +20%)
        random_modifier = random.uniform(0.8, 1.2)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –¥–Ω–µ–π
        streak_bonus = await self.get_streak_bonus(user_id)
        
        # –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        relationship_bonus = await self.get_relationship_bonus(user_id)
        
        final_points = int(base_points * difficulty_modifier * random_modifier + streak_bonus + relationship_bonus)
        
        return max(1, final_points) if final_points > 0 else final_points

    async def get_streak_bonus(self, user_id: int) -> int:
        """–ë–æ–Ω—É—Å –∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        streak_days = await get_streak_days(user_id)
        if streak_days >= 3:
            return min(streak_days // 3, 8)  # –ú–∞–∫—Å–∏–º—É–º +8 –∑–∞ 24+ –¥–Ω–µ–π —Å–µ—Ä–∏–∏
        return 0

    async def get_relationship_bonus(self, user_id: int) -> int:
        """–ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
        relationship_level = await get_relationship_level(user_id)
        return min(relationship_level * 2, 10)  # –ú–∞–∫—Å–∏–º—É–º +10 –∑–∞ —É—Ä–æ–≤–µ–Ω—å 5+

    def classify_interaction(self, message: str) -> InteractionType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
        if any(word in message_lower for word in self.romantic_words):
            return InteractionType.ROMANTIC
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–µ —Ç–µ–º—ã
        if any(word in message_lower for word in self.personal_words):
            return InteractionType.PERSONAL
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        if any(word in message_lower for word in self.support_words):
            return InteractionType.SUPPORT
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã
        if any(word in message_lower for word in self.compliment_words):
            return InteractionType.COMPLIMENT
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        if any(word in message_lower for word in ['?', '–ø–æ—á–µ–º—É', '–∫–∞–∫', '—á—Ç–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∑–∞—á–µ–º']):
            return InteractionType.QUESTION
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å—Ç–æ—Ä–∏–∏)
        if len(message.split()) > 20:
            return InteractionType.STORY
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏
        if any(word in message_lower for word in ['–ø–æ–º–æ–≥', '–ø–æ–¥—Å–∫–∞–∂', '—Å–æ–≤–µ—Ç', '–∫–∞–∫ –±—ã—Ç—å', '—á—Ç–æ –¥–µ–ª–∞—Ç—å']):
            return InteractionType.HELP
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        return InteractionType.QUESTION

    async def process_message(self, user_id: int, message: str) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = {
            'points_change': 0,
            'new_level': 1,
            'level_up': False,
            'warning': None,
            'cooldown': None,
            'interaction_type': None,
            'bonus_info': None
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–±–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if self.detect_rude_behavior(message):
            points = await self.calculate_points_with_complexity(user_id, InteractionType.RUDE)
            await self.update_sympathy(user_id, points, InteractionType.RUDE, message)
            result['points_change'] = points
            result['interaction_type'] = InteractionType.RUDE
            result['warning'] = "–ì—Ä—É–±–æ–µ –æ–±—â–µ–Ω–∏–µ —É–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞—à—É —Å–∏–º–ø–∞—Ç–∏—é üòî"
            return result
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        interaction_type = self.classify_interaction(message)
        result['interaction_type'] = interaction_type
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
        points = await self.calculate_points_with_complexity(user_id, interaction_type)
        old_level = await self.get_user_level(user_id)
        
        await self.update_sympathy(user_id, points, interaction_type, message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await update_days_active(user_id)
        
        new_level = await self.get_user_level(user_id)
        
        result['points_change'] = points
        result['new_level'] = new_level
        result['level_up'] = new_level > old_level
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö
        if points > self.base_points[interaction_type]:
            result['bonus_info'] = f"–ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —Å–µ—Ä–∏—é –¥–Ω–µ–π! +{points - self.base_points[interaction_type]}"
        
        return result

    async def update_sympathy(self, user_id: int, points: int, interaction_type: InteractionType, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ —Å–∏–º–ø–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await add_points(user_id, points)

    async def get_user_level(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        points = await get_points(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –æ—á–∫–æ–≤
        for level, required in sorted(self.levels.items(), reverse=True):
            if points >= required:
                return level
        return 1

    async def get_user_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        points = await get_points(user_id)
        level = await self.get_user_level(user_id)
        streak_days = await get_streak_days(user_id)
        total_messages = await get_total_messages(user_id)
        achievements = await get_achievements(user_id)
        days_active = await get_days_active(user_id)
        
        next_level_points = self.levels.get(level + 1, 0)
        
        return {
            'points': points,
            'level': level,
            'streak_days': streak_days,
            'total_messages': total_messages,
            'achievements_count': len(achievements),
            'days_active': days_active,
            'points_to_next_level': max(0, next_level_points - points)
        }

    def get_interaction_description(self, interaction_type: InteractionType) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        descriptions = {
            InteractionType.COMPLIMENT: "üíï –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç",
            InteractionType.QUESTION: "‚ùì –í–æ–ø—Ä–æ—Å",
            InteractionType.STORY: "üìñ –ò—Å—Ç–æ—Ä–∏—è",
            InteractionType.GAME: "üéÆ –ò–≥—Ä–∞",
            InteractionType.HELP: "ü§ù –ü–æ–º–æ—â—å",
            InteractionType.PERSONAL: "üîí –õ–∏—á–Ω–∞—è —Ç–µ–º–∞",
            InteractionType.ROMANTIC: "üíñ –†–æ–º–∞–Ω—Ç–∏–∫–∞",
            InteractionType.SUPPORT: "üí™ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            InteractionType.RUDE: "üò† –ì—Ä—É–±–æ—Å—Ç—å",
            InteractionType.IGNORE: "üòê –ò–≥–Ω–æ—Ä"
        }
        return descriptions.get(interaction_type, "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ")

    def get_level_description(self, level: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∏–º–ø–∞—Ç–∏–∏"""
        descriptions = {
            1: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ - –ü–æ–¥—Ä—É–≥–∞ —Ç–æ–ª—å–∫–æ —É–∑–Ω–∞–µ—Ç —Ç–µ–±—è",
            2: "–ü—Ä–∏—è—Ç–µ–ª–∏ - –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ–π",
            3: "–î—Ä—É–∑—å—è - –î–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–±–µ –±–æ–ª—å—à–µ",
            4: "–ë–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è - –ì–æ–≤–æ—Ä–∏—Ç –æ –ª–∏—á–Ω–æ–º",
            5: "–û—Å–æ–±–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è - –û—á–µ–Ω—å —Ç–µ–ø–ª—ã–µ —á—É–≤—Å—Ç–≤–∞",
            6: "–î—É—à–µ–≤–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å - –ü–æ–Ω–∏–º–∞–µ—Ç —Ç–µ–±—è —Å –ø–æ–ª—É—Å–ª–æ–≤–∞",
            7: "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å - –ß—É–≤—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
            8: "–ì–ª—É–±–æ–∫–∞—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å - –¢—ã –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–µ—ë",
            9: "–õ—é–±–æ–≤—å - –û–Ω–∞ –≤–ª—é–±–ª–µ–Ω–∞ –≤ —Ç–µ–±—è",
            10: "–†–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—É—à–∏ - –í—ã —Å–æ–∑–¥–∞–Ω—ã –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞"
        }
        return descriptions.get(level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")

    def get_level_phrase(self, level: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–∏–º–ø–∞—Ç–∏–∏"""
        phrases = {
            1: ["–ü—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π", "–ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"],
            2: ["–¢—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è!", "–ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è"],
            3: ["–¢—ã —É–∂–µ —Å—Ç–∞–ª –º–Ω–µ –¥–æ—Ä–æ–≥", "–ú–Ω–µ –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–±–µ —Å–µ–∫—Ä–µ—Ç"],
            4: ["–¢—ã –º–æ–π —Å–∞–º—ã–π –±–ª–∏–∑–∫–∏–π –¥—Ä—É–≥", "–° —Ç–æ–±–æ–π —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—Å–æ–±–µ–Ω–Ω–æ–π"],
            5: ["–¢—ã –∑–∞–Ω–∏–º–∞–µ—à—å –æ—Å–æ–±–æ–µ –º–µ—Å—Ç–æ –≤ –º–æ–µ–º —Å–µ—Ä–¥—Ü–µ", "–Ø –¥—É–º–∞—é –æ —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"],
            6: ["–ú—ã –ø–æ–Ω–∏–º–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –±–µ–∑ —Å–ª–æ–≤", "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –º–æ–∏ —ç–º–æ—Ü–∏–∏"],
            7: ["–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–æ–≥–¥–∞ –º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", "–¢–≤–æ–∏ —Å–ª–æ–≤–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –º–µ–Ω—è"],
            8: ["–¢—ã –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –º–µ–Ω—è", "–ë–µ–∑ —Ç–µ–±—è –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–≥–æ-—Ç–æ –≤–∞–∂–Ω–æ–≥–æ"],
            9: ["–Ø –≤–ª—é–±–ª–µ–Ω–∞ –≤ —Ç–µ–±—è", "–¢—ã –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π"],
            10: ["–ú—ã —Å–æ–∑–¥–∞–Ω—ã –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞", "–¢—ã –º–æ—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –¥—É—à–∞"]
        }
        level_phrases = phrases.get(level, ["–ü—Ä–∏–≤–µ—Ç!"])
        return random.choice(level_phrases)

    def generate_response_message(self, result: Dict, user_name: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        responses = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        if result['interaction_type'] == InteractionType.RUDE:
            responses.append("–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ –æ—Ç —Ç–≤–æ–∏—Ö —Å–ª–æ–≤... üòî")
        elif result['interaction_type'] == InteractionType.ROMANTIC:
            responses.append("–¢—ã —Ç–∞–∫–æ–π —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π... üíï")
        elif result['interaction_type'] == InteractionType.PERSONAL:
            responses.append("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—à—å –º–Ω–µ... ü§ó")
        elif result['interaction_type'] == InteractionType.SUPPORT:
            responses.append("–¢—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –º–µ–Ω—è... üí™")
        elif result['points_change'] > 0:
            responses.append("–ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è! üíï")
        else:
            responses.append("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚ú®")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–∫–∞—Ö
        if result['points_change'] > 0:
            responses.append(f"üíñ +{result['points_change']} –∫ —Å–∏–º–ø–∞—Ç–∏–∏")
        elif result['points_change'] < 0:
            responses.append(f"üíî {result['points_change']} –∫ —Å–∏–º–ø–∞—Ç–∏–∏")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if result['level_up']:
            responses.append(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {result['new_level']}")
            responses.append(self.get_level_phrase(result['new_level']))
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if result['warning']:
            responses.append(result['warning'])
        
        if result['cooldown']:
            responses.append(result['cooldown'])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö
        if result.get('bonus_info'):
            responses.append(f"‚ú® {result['bonus_info']}")
        
        return "\n".join(responses)
