from __future__ import annotations

import random
from typing import Dict, List, Tuple, Optional

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä
ASSOCIATIONS = [
    "–º–æ—Ä–µ", "—Å–æ–ª–Ω—Ü–µ", "–∑–≤–µ–∑–¥—ã", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "—Ü–≤–µ—Ç—ã", "–∫–æ—Ñ–µ", "—á–∞–π", 
    "–∫–Ω–∏–≥–∞", "–º—É–∑—ã–∫–∞", "—Ç–∞–Ω—Ü—ã", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–º–µ—á—Ç—ã", "—Å—á–∞—Å—Ç—å–µ", "–ª—é–±–æ–≤—å",
    "–¥—Ä—É–∂–±–∞", "—Å–µ–º—å—è", "–¥–æ–º", "—Ä–∞–±–æ—Ç–∞", "–æ—Ç–¥—ã—Ö", "—Å–ø–æ—Ä—Ç", "–∏—Å–∫—É—Å—Å—Ç–≤–æ",
    "–ø—Ä–∏—Ä–æ–¥–∞", "–∂–∏–≤–æ—Ç–Ω—ã–µ", "–µ–¥–∞", "–≤—Ä–µ–º—è", "–ø–∞–º—è—Ç—å", "–±—É–¥—É—â–µ–µ", "–ø—Ä–æ—à–ª–æ–µ"
]

RIDDLES = [
    {
        "question": "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–ª–æ–º–∞—Ç—å, –Ω–µ –¥–µ—Ä–∂–∞ –≤ —Ä—É–∫–∞—Ö?",
        "answer": "–æ–±–µ—â–∞–Ω–∏–µ",
        "hints": ["–≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Å–ª–æ–≤–∞–º–∏", "–ú–æ–∂–Ω–æ –¥–∞—Ç—å –∏ –Ω–µ —Å–¥–µ—Ä–∂–∞—Ç—å"]
    },
    {
        "question": "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–ø–µ—Ä–µ–¥–∏ –Ω–∞—Å, –Ω–æ –º—ã –µ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–∏–º?",
        "answer": "–±—É–¥—É—â–µ–µ",
        "hints": ["–≠—Ç–æ –≤—Ä–µ–º—è", "–û–Ω–æ –≤—Å–µ–≥–¥–∞ –≥—Ä—è–¥—ë—Ç"]
    },
    {
        "question": "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–ª—ã—à–∞—Ç—å, –Ω–æ –Ω–µ–ª—å–∑—è —É–≤–∏–¥–µ—Ç—å?",
        "answer": "–∑–≤—É–∫",
        "hints": ["–≠—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ", "–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å"]
    },
    {
        "question": "–ß—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–æ–∫—Ä—ã–º, –∫–æ–≥–¥–∞ —Å–æ—Ö–Ω–µ—Ç?",
        "answer": "–ø–æ–ª–æ—Ç–µ–Ω—Ü–µ",
        "hints": ["–≠—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞–Ω–Ω–æ–π", "–ò–º –≤—ã—Ç–∏—Ä–∞—é—Ç—Å—è"]
    },
    {
        "question": "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–ª–æ–º–∞—Ç—å, –Ω–µ –ø—Ä–∏–∫–∞—Å–∞—è—Å—å –∫ –Ω–µ–º—É?",
        "answer": "—Å–µ—Ä–¥—Ü–µ",
        "hints": ["–≠—Ç–æ –æ—Ä–≥–∞–Ω", "–ú–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å —Å–ª–æ–≤–∞–º–∏"]
    }
]

COMPLIMENTS = {
    "male": [
        "–¢—ã —Ç–∞–∫–æ–π —Å–∏–ª—å–Ω—ã–π –∏ –º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π! üí™",
        "–£ —Ç–µ–±—è —Ç–∞–∫–æ–π –∫—Ä–∞—Å–∏–≤—ã–π –≥–æ–ª–æ—Å! üòç",
        "–¢—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π –∏ —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π! üß†",
        "–£ —Ç–µ–±—è —Ç–∞–∫–∏–µ –¥–æ–±—Ä—ã–µ –≥–ª–∞–∑–∞! üëÄ",
        "–¢—ã —Ç–∞–∫–æ–π –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π! üíï",
        "–£ —Ç–µ–±—è —Ç–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —É–ª—ã–±–∫–∞! üòä",
        "–¢—ã —Ç–∞–∫–æ–π —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π! üé®",
        "–£ —Ç–µ–±—è —Ç–∞–∫–æ–µ –æ–±–∞—è–Ω–∏–µ! üòò",
        "–¢—ã —Ç–∞–∫–æ–π –Ω–∞–¥—ë–∂–Ω—ã–π –∏ –≤–µ—Ä–Ω—ã–π! ü§ù",
        "–£ —Ç–µ–±—è —Ç–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥—É—à–∞! ‚ú®"
    ],
    "female": [
        "–¢—ã —Ç–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è! üíÑ",
        "–£ —Ç–µ–±—è —Ç–∞–∫–∏–µ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ –≥–ª–∞–∑–∞! üëÅÔ∏è",
        "–¢—ã —Ç–∞–∫–∞—è —É–º–Ω–∞—è –∏ –º—É–¥—Ä–∞—è! üß†",
        "–£ —Ç–µ–±—è —Ç–∞–∫–∞—è –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —É–ª—ã–±–∫–∞! üòä",
        "–¢—ã —Ç–∞–∫–∞—è –Ω–µ–∂–Ω–∞—è –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è! üíï",
        "–£ —Ç–µ–±—è —Ç–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥—É—à–∞! ‚ú®",
        "–¢—ã —Ç–∞–∫–∞—è —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–∞—è –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è! üé®",
        "–£ —Ç–µ–±—è —Ç–∞–∫–æ–µ –æ–±–∞—è–Ω–∏–µ! üòò",
        "–¢—ã —Ç–∞–∫–∞—è —Å–∏–ª—å–Ω–∞—è –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è! üí™",
        "–£ —Ç–µ–±—è —Ç–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è! ‚ö°"
    ]
}

TRUTH_QUESTIONS = {
    "male": [
        "–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –º–µ—á—Ç–∞?",
        "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?",
        "–ö–∞–∫–æ–π —Ç–≤–æ–π —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π –ø–æ—Å—Ç—É–ø–æ–∫?",
        "–ß—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ü–µ–Ω–∏—à—å –≤ –ª—é–¥—è—Ö?",
        "–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å–ª–∞–±–æ—Å—Ç—å?",
        "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—É–≥–∞–µ—Ç?",
        "–ö–∞–∫–æ–π —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å?",
        "–ß—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–µ–±–µ?",
        "–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –≥–æ—Ä–¥–æ—Å—Ç—å?",
        "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª—è–µ—Ç?"
    ],
    "female": [
        "–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –º–µ—á—Ç–∞?",
        "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?",
        "–ö–∞–∫–æ–π —Ç–≤–æ–π —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π –ø–æ—Å—Ç—É–ø–æ–∫?",
        "–ß—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ü–µ–Ω–∏—à—å –≤ –ª—é–¥—è—Ö?",
        "–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å–ª–∞–±–æ—Å—Ç—å?",
        "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—É–≥–∞–µ—Ç?",
        "–ö–∞–∫–æ–π —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å?",
        "–ß—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–µ–±–µ?",
        "–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –≥–æ—Ä–¥–æ—Å—Ç—å?",
        "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª—è–µ—Ç?"
    ]
}

DARE_TASKS = [
    "–°–ø–æ–π –º–Ω–µ –ø–µ—Å–Ω—é! üéµ",
    "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç! üòÑ",
    "–°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Å–µ–±–µ! üòä",
    "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π –º–µ—á—Ç–µ! ‚ú®",
    "–°–¥–µ–ª–∞–π –∑–∞—Ä—è–¥–∫—É! üí™",
    "–†–∞—Å—Å–∫–∞–∂–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ! üìù",
    "–°–¥–µ–ª–∞–π —Å–º–µ—à–Ω–æ–µ –ª–∏—Ü–æ! üòú",
    "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º —Ö–æ–±–±–∏! üé®",
    "–°–¥–µ–ª–∞–π —Ç–∞–Ω–µ—Ü! üíÉ",
    "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ª—é–±–∏–º–æ–º —Ñ–∏–ª—å–º–µ! üé¨"
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
game_states: Dict[int, Dict] = {}

# –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
user_responses: Dict[int, List[str]] = {}

def get_game_state(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in game_states:
        game_states[user_id] = {
            "current_game": None,
            "game_data": {},
            "score": 0
        }
    return game_states[user_id]

def save_user_response(user_id: int, response: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏."""
    if user_id not in user_responses:
        user_responses[user_id] = []
    user_responses[user_id].append(response)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –æ—Ç–≤–µ—Ç–∞–º–∏
    if len(user_responses[user_id]) > 10:
        user_responses[user_id] = user_responses[user_id][-10:]

def get_personalized_response(user_id: int, base_responses: List[str]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_responses or not user_responses[user_id]:
        return random.choice(base_responses)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recent_responses = user_responses[user_id][-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç–≤–µ—Ç–∞
    response_text = " ".join(recent_responses).lower()
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if any(word in response_text for word in ["–∫—Ä—É—Ç–æ", "–∫–ª–∞—Å—Å–Ω–æ", "—Å—É–ø–µ—Ä", "–æ—Ç–ª–∏—á–Ω–æ"]):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        personalized_responses = [
            f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π! {random.choice(base_responses)}",
            f"–¢—ã —Ç–∞–∫–æ–π –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π! {random.choice(base_responses)}",
            f"–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞! {random.choice(base_responses)}"
        ]
    elif any(word in response_text for word in ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å–Ω–æ", "—É—Å—Ç–∞–ª", "—Å–ª–æ–∂–Ω–æ"]):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –≥—Ä—É—Å—Ç—å
        personalized_responses = [
            f"–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ª–µ–≥–∫–æ, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! {random.choice(base_responses)}",
            f"–¢—ã —Ç–∞–∫–æ–π —Å–∏–ª—å–Ω—ã–π, —á—Ç–æ –ø—Ä–µ–æ–¥–æ–ª–µ–µ—à—å –ª—é–±—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏! {random.choice(base_responses)}",
            f"–Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è! {random.choice(base_responses)}"
        ]
    elif any(word in response_text for word in ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–æ–±–æ–∂–∞—é", "–≤–æ—Å—Ö–∏—â–∞—é—Å—å"]):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –ª—é–±–æ–≤—å
        personalized_responses = [
            f"–¢—ã —Ç–∞–∫–æ–π —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π! {random.choice(base_responses)}",
            f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫ —Ç—ã –≤—ã—Ä–∞–∂–∞–µ—à—å —á—É–≤—Å—Ç–≤–∞! {random.choice(base_responses)}",
            f"–¢—ã —Ç–∞–∫–æ–π –Ω–µ–∂–Ω—ã–π! {random.choice(base_responses)}"
        ]
    elif len(response_text.split()) > 10:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
        personalized_responses = [
            f"–¢—ã —Ç–∞–∫–æ–π –∫—Ä–∞—Å–Ω–æ—Ä–µ—á–∏–≤—ã–π! {random.choice(base_responses)}",
            f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫ —Ç—ã –ø–æ–¥—Ä–æ–±–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å! {random.choice(base_responses)}",
            f"–¢—ã —Ç–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! {random.choice(base_responses)}"
        ]
    else:
        # –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        personalized_responses = base_responses
    
    return random.choice(personalized_responses)

def start_associations(user_id: int) -> str:
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏."""
    state = get_game_state(user_id)
    state["current_game"] = "associations"
    state["game_data"] = {
        "current_word": random.choice(ASSOCIATIONS),
        "round": 1,
        "total_rounds": 5
    }
    
    
    return f"üîó –ò–≥—Ä–∞ –≤ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏! –Ø —Å–∫–∞–∂—É —Å–ª–æ–≤–æ, –∞ —Ç—ã —Å–∫–∞–∂–∏ –ø–µ—Ä–≤–æ–µ, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É üòò\n\n–°–ª–æ–≤–æ #{state['game_data']['round']}: '{state['game_data']['current_word']}'"

def process_association(user_id: int, user_response: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –∏–≥—Ä–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π."""
    state = get_game_state(user_id)
    if state["current_game"] != "associations":
        return "–ú—ã –Ω–µ –∏–≥—Ä–∞–µ–º –≤ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å üòä"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_response(user_id, user_response)
    
    game_data = state["game_data"]
    base_responses = [
        f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! '{user_response}' - —Ö–æ—Ä–æ—à–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å '{game_data['current_word']}' üòä",
        f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è! '{user_response}' –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ '{game_data['current_word']}' üíï",
        f"–û—Ç–ª–∏—á–Ω–æ! '{user_response}' - –æ—á–µ–Ω—å —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å '{game_data['current_word']}' üòò",
        f"–ö–ª–∞—Å—Å–Ω–æ! '{user_response}' - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å '{game_data['current_word']}' üíñ",
        f"–ó–¥–æ—Ä–æ–≤–æ! '{user_response}' - –∫—Ä–∞—Å–∏–≤–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å '{game_data['current_word']}' üòç"
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response = get_personalized_response(user_id, base_responses)
    state["score"] += 1
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    game_data["round"] += 1
    if game_data["round"] <= game_data["total_rounds"]:
        game_data["current_word"] = random.choice(ASSOCIATIONS)
        response += f"\n\n–°–ª–æ–≤–æ #{game_data['round']}: '{game_data['current_word']}'"
    else:
        # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        response += f"\n\nüéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –Ω–∞–±—Ä–∞–ª {state['score']} –æ—á–∫–æ–≤! –¢—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π! üòò"
        state["current_game"] = None
        state["game_data"] = {}
        state["score"] = 0
    
    return response

def start_riddles(user_id: int) -> str:
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –∑–∞–≥–∞–¥–∫–∏."""
    state = get_game_state(user_id)
    state["current_game"] = "riddles"
    state["game_data"] = {
        "current_riddle": random.choice(RIDDLES),
        "round": 1,
        "total_rounds": 3,
        "hints_used": 0
    }
    
    return f"ü§î –ó–∞–≥–∞–¥–∫–∞ #{state['game_data']['round']}:\n{state['game_data']['current_riddle']['question']}\n\n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å! –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Å–∫–∞–∂–∏ '–ø–æ–¥—Å–∫–∞–∑–∫–∞' üòò"

def process_riddle(user_id: int, user_response: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –∏–≥—Ä–µ –∑–∞–≥–∞–¥–æ–∫."""
    state = get_game_state(user_id)
    if state["current_game"] != "riddles":
        return "–ú—ã –Ω–µ –∏–≥—Ä–∞–µ–º –≤ –∑–∞–≥–∞–¥–∫–∏ —Å–µ–π—á–∞—Å üòä"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_response(user_id, user_response)
    
    game_data = state["game_data"]
    current_riddle = game_data["current_riddle"]
    
    if user_response.lower() == "–ø–æ–¥—Å–∫–∞–∑–∫–∞":
        if game_data["hints_used"] < len(current_riddle["hints"]):
            hint = current_riddle["hints"][game_data["hints_used"]]
            game_data["hints_used"] += 1
            return f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòä"
        else:
            return f"üòÖ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{current_riddle['answer']}'\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥–∞–¥–∫–µ! üòò"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    user_answer = user_response.lower().strip()
    correct_answer = current_riddle["answer"].lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ
    if (user_answer == correct_answer or 
        user_answer in correct_answer or 
        correct_answer in user_answer or
        any(word in user_answer for word in correct_answer.split())):
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        state["score"] += 1
        base_responses = [
            f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π! '{current_riddle['answer']}' - –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! üòç",
            f"üåü –û—Ç–ª–∏—á–Ω–æ! –¢—ã –æ—Ç–≥–∞–¥–∞–ª! '{current_riddle['answer']}' - –∏–º–µ–Ω–Ω–æ —ç—Ç–æ! üíï",
            f"üéØ –ë—Ä–∞–≤–æ! –¢—ã —Ç–∞–∫–æ–π —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π! '{current_riddle['answer']}' - –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üòò",
            f"üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π! '{current_riddle['answer']}' - –≤–µ—Ä–Ω–æ! üíñ"
        ]
        response = get_personalized_response(user_id, base_responses)
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        base_responses = [
            f"üòä –ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫, –Ω–æ —Ç—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø—ã—Ç–∞–µ—à—å—Å—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üíï",
            f"ü§î –ü–æ—á—Ç–∏, –Ω–æ –Ω–µ —Ç–æ! –ù–µ —Å–¥–∞–≤–∞–π—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòò",
            f"üí≠ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å, –Ω–æ –Ω–µ —Å–æ–≤—Å–µ–º! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ üíñ",
            f"üòä –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –ù–æ –æ—Ç–≤–µ—Ç –¥—Ä—É–≥–æ–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòç"
        ]
        response = get_personalized_response(user_id, base_responses)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥–∞–¥–∫–µ
    game_data["round"] += 1
    if game_data["round"] <= game_data["total_rounds"]:
        game_data["current_riddle"] = random.choice(RIDDLES)
        game_data["hints_used"] = 0
        response += f"\n\nü§î –ó–∞–≥–∞–¥–∫–∞ #{game_data['round']}:\n{game_data['current_riddle']['question']}\n\n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å! –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Å–∫–∞–∂–∏ '–ø–æ–¥—Å–∫–∞–∑–∫–∞' üòò"
    else:
        # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        response += f"\n\nüéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –æ—Ç–≥–∞–¥–∞–ª {state['score']} –∑–∞–≥–∞–¥–æ–∫! –¢—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π! üòò"
        state["current_game"] = None
        state["game_data"] = {}
        state["score"] = 0
    
    return response

def start_compliments(user_id: int, gender: str) -> str:
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã."""
    state = get_game_state(user_id)
    state["current_game"] = "compliments"
    state["game_data"] = {
        "round": 1,
        "total_rounds": 5,
        "gender": gender
    }
    
    return f"üíï –ò–≥—Ä–∞ –≤ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã! –°–∫–∞–∂–∏ –º–Ω–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç, –∞ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ —Ç–µ–º –∂–µ üòä\n\n–†–∞—É–Ω–¥ {state['game_data']['round']}/{state['game_data']['total_rounds']}\n\n–ù–∞—á–Ω–∏ —Å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞! üòò"

def process_compliment(user_id: int, user_compliment: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –≤ –∏–≥—Ä–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤."""
    state = get_game_state(user_id)
    if state["current_game"] != "compliments":
        return "–ú—ã –Ω–µ –∏–≥—Ä–∞–µ–º –≤ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã —Å–µ–π—á–∞—Å üòä"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_response(user_id, user_compliment)
    
    game_data = state["game_data"]
    gender = game_data["gender"]
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç
    compliment = random.choice(COMPLIMENTS.get(gender, COMPLIMENTS["male"]))
    
    base_responses = [
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç! {compliment}",
        f"–ö–∞–∫ –º–∏–ª–æ! {compliment}",
        f"–¢—ã —Ç–∞–∫–æ–π –¥–æ–±—Ä—ã–π! {compliment}",
        f"–°–ø–∞—Å–∏–±–æ! {compliment}",
        f"–ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ! {compliment}"
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response = get_personalized_response(user_id, base_responses)
    state["score"] += 1
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    game_data["round"] += 1
    if game_data["round"] <= game_data["total_rounds"]:
        response += f"\n\n–†–∞—É–Ω–¥ {game_data['round']}/{game_data['total_rounds']}\n\n–°–∫–∞–∂–∏ –º–Ω–µ –µ—â—ë –æ–¥–∏–Ω –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç! üòò"
    else:
        # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        response += f"\n\nüéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ú—ã –æ–±–º–µ–Ω—è–ª–∏—Å—å {state['score']} –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞–º–∏! –¢—ã —Ç–∞–∫–æ–π –º–∏–ª—ã–π! üòò"
        state["current_game"] = None
        state["game_data"] = {}
        state["score"] = 0
    
    return response

def start_truth_dare(user_id: int, gender: str) -> str:
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ."""
    state = get_game_state(user_id)
    state["current_game"] = "truth_dare"
    state["game_data"] = {
        "round": 1,
        "total_rounds": 5,
        "gender": gender
    }
    
    return f"üéØ –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å: '–ø—Ä–∞–≤–¥–∞' –∏–ª–∏ '–¥–µ–π—Å—Ç–≤–∏–µ' üòò\n\n–†–∞—É–Ω–¥ {state['game_data']['round']}/{state['game_data']['total_rounds']}"

def process_truth_dare(user_id: int, user_choice: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤ –∏–≥—Ä–µ –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ."""
    state = get_game_state(user_id)
    if state["current_game"] != "truth_dare":
        return "–ú—ã –Ω–µ –∏–≥—Ä–∞–µ–º –≤ –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å üòä"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_response(user_id, user_choice)
    
    game_data = state["game_data"]
    gender = game_data["gender"]
    
    if user_choice.lower() in ["–ø—Ä–∞–≤–¥–∞", "truth"]:
        # –ü—Ä–∞–≤–¥–∞
        question = random.choice(TRUTH_QUESTIONS.get(gender, TRUTH_QUESTIONS["male"]))
        base_responses = [
            f"üí≠ –ü—Ä–∞–≤–¥–∞! –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ: {question} üòä",
            f"ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü—Ä–∞–≤–¥–∞: {question} üíï",
            f"üí≠ –ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è: {question} üòò"
        ]
        response = get_personalized_response(user_id, base_responses)
    elif user_choice.lower() in ["–¥–µ–π—Å—Ç–≤–∏–µ", "dare", "–¥–µ–π—Å—Ç–≤–∏–µ"]:
        # –î–µ–π—Å—Ç–≤–∏–µ
        task = random.choice(DARE_TASKS)
        base_responses = [
            f"üé¨ –î–µ–π—Å—Ç–≤–∏–µ! –í—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ: {task} üòò",
            f"üéØ –í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç! {task} üíï",
            f"üé™ –ü–æ–∫–∞–∂–∏, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω! {task} üòä"
        ]
        response = get_personalized_response(user_id, base_responses)
    else:
        base_responses = [
            "üòä –í—ã–±–µ—Ä–∏ '–ø—Ä–∞–≤–¥–∞' –∏–ª–∏ '–¥–µ–π—Å—Ç–≤–∏–µ'! üòò",
            "ü§î –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å: –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ? üíï",
            "üòä –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ? –†–µ—à–∞–π! üòò"
        ]
        response = get_personalized_response(user_id, base_responses)
        return response
    
    state["score"] += 1
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    game_data["round"] += 1
    if game_data["round"] <= game_data["total_rounds"]:
        response += f"\n\n–†–∞—É–Ω–¥ {game_data['round']}/{game_data['total_rounds']}\n\n–í—ã–±–∏—Ä–∞–π —Å–Ω–æ–≤–∞: '–ø—Ä–∞–≤–¥–∞' –∏–ª–∏ '–¥–µ–π—Å—Ç–≤–∏–µ'! üòò"
    else:
        # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        response += f"\n\nüéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ú—ã –ø—Ä–æ—à–ª–∏ {state['score']} —Ä–∞—É–Ω–¥–æ–≤! –¢—ã —Ç–∞–∫–æ–π —Å–º–µ–ª—ã–π! üòò"
        state["current_game"] = None
        state["game_data"] = {}
        state["score"] = 0
    
    return response

def process_game_message(user_id: int, message: str, gender: str = "male") -> str:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–≥—Ä—ã."""
    state = get_game_state(user_id)
    
    
    if not state["current_game"]:
        return "–ú—ã –Ω–µ –∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É —Å–µ–π—á–∞—Å üòä"
    
    if state["current_game"] == "associations":
        return process_association(user_id, message)
    elif state["current_game"] == "riddles":
        return process_riddle(user_id, message)
    elif state["current_game"] == "compliments":
        return process_compliment(user_id, message)
    elif state["current_game"] == "truth_dare":
        return process_truth_dare(user_id, message)
    elif state["current_game"] == "story":
        return process_story(user_id, message)
    else:
        return "–ú—ã –Ω–µ –∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É —Å–µ–π—á–∞—Å üòä"

def start_story(user_id: int) -> str:
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏—é."""
    state = get_game_state(user_id)
    state["current_game"] = "story"
    state["game_data"] = {
        "story_parts": [],
        "round": 1,
        "total_rounds": 5
    }
    
    return f"üìñ –ò–≥—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é! –î–∞–≤–∞–π —Å–æ—á–∏–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–µ! üòò\n\n–†–∞—É–Ω–¥ {state['game_data']['round']}/{state['game_data']['total_rounds']}\n\n–ù–∞—á–Ω–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∞ —è –ø—Ä–æ–¥–æ–ª–∂—É! üíï"

def process_story(user_id: int, user_text: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –∏–≥—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏."""
    state = get_game_state(user_id)
    if state["current_game"] != "story":
        return "–ú—ã –Ω–µ –∏–≥—Ä–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ–π—á–∞—Å üòä"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_response(user_id, user_text)
    
    game_data = state["game_data"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    game_data["story_parts"].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_text}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    story_continuations = [
        f"–ò –≤–¥—Ä—É–≥ –ø—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ...",
        f"–í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –æ–Ω –ø–æ–Ω—è–ª, —á—Ç–æ –≤—Å—ë –∏–∑–º–µ–Ω–∏–ª–æ—Å—å...",
        f"–ù–æ —Ç—É—Ç –ø–æ—è–≤–∏–ª—Å—è –∫—Ç–æ-—Ç–æ, –∫—Ç–æ –≤—Å—ë –ø–µ—Ä–µ–≤–µ—Ä–Ω—É–ª...",
        f"–í–Ω–µ–∑–∞–ø–Ω–æ —Ä–∞–∑–¥–∞–ª—Å—è –∑–≤—É–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏–ª –≤—Å—ë...",
        f"–ò —Ç–æ–≥–¥–∞ –æ–Ω —Ä–µ—à–∏–ª, —á—Ç–æ –ø–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å...",
        f"–ù–æ —Å—É–¥—å–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –µ–º—É —Å—é—Ä–ø—Ä–∏–∑...",
        f"–í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –≤—Å—ë —Å—Ç–∞–ª–æ —è—Å–Ω–æ...",
        f"–ò –æ–Ω –ø–æ–Ω—è–ª, —á—Ç–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ..."
    ]
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_responses and user_responses[user_id]:
        recent_responses = " ".join(user_responses[user_id][-2:]).lower()
        if any(word in recent_responses for word in ["—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ", "–ª—é–±–æ–≤—å", "—Å–µ—Ä–¥—Ü–µ", "—á—É–≤—Å—Ç–≤–∞"]):
            story_continuations = [
                f"–ò –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –∏—Ö —Å–µ—Ä–¥—Ü–∞ –∑–∞–±–∏–ª–∏—Å—å –≤ —É–Ω–∏—Å–æ–Ω...",
                f"–í–∑–≥–ª—è–¥ –∏—Ö –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è, –∏ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å...",
                f"–û–Ω–∞ –ø–æ–Ω—è–ª–∞, —á—Ç–æ —ç—Ç–æ –±—ã–ª–∞ —Å—É–¥—å–±–∞...",
                f"–ò —Ç–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏–∑–Ω–∞–ª—Å—è –µ–π –≤ –ª—é–±–≤–∏..."
            ]
        elif any(word in recent_responses for word in ["—Å—Ç—Ä–∞—à–Ω–æ", "—É–∂–∞—Å", "–º–æ–Ω—Å—Ç—Ä", "—Ç–µ–Ω—å"]):
            story_continuations = [
                f"–í–Ω–µ–∑–∞–ø–Ω–æ –∏–∑ —Ç–µ–Ω–∏ –ø–æ—è–≤–∏–ª–∞—Å—å —Ñ–∏–≥—É—Ä–∞...",
                f"–°—Ç—Ä–∞–Ω–Ω—ã–π –∑–≤—É–∫ –∑–∞—Å—Ç–∞–≤–∏–ª –µ–≥–æ –æ–±–µ—Ä–Ω—É—Ç—å—Å—è...",
                f"–û–Ω –ø–æ–Ω—è–ª, —á—Ç–æ –Ω–µ –æ–¥–∏–Ω –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ...",
                f"–ß—Ç–æ-—Ç–æ –∑–ª–æ–≤–µ—â–µ–µ –ø—Ä–∏–±–ª–∏–∂–∞–ª–æ—Å—å..."
            ]
        elif any(word in recent_responses for word in ["—Å–º–µ—à–Ω–æ", "–≤–µ—Å–µ–ª–æ", "—Å–º–µ—Ö", "—à—É—Ç–∫–∞"]):
            story_continuations = [
                f"–ò —Ç—É—Ç –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ—á—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ–ª–µ–ø–æ–µ...",
                f"–û–Ω –Ω–µ –º–æ–≥ —Å–¥–µ—Ä–∂–∞—Ç—å —Å–º–µ—Ö...",
                f"–°–∏—Ç—É–∞—Ü–∏—è —Å—Ç–∞–ª–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∞–±—Å—É—Ä–¥–Ω–æ–π...",
                f"–ò —Ç–æ–≥–¥–∞ –≤—Å–µ –Ω–∞—á–∞–ª–∏ —Å–º–µ—è—Ç—å—Å—è..."
            ]
    
    continuation = random.choice(story_continuations)
    game_data["story_parts"].append(f"–ü–æ–¥—Ä—É–≥–∞: {continuation}")
    
    response = f"üí≠ {continuation}\n\n"
    state["score"] += 1
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    game_data["round"] += 1
    if game_data["round"] <= game_data["total_rounds"]:
        response += f"–†–∞—É–Ω–¥ {game_data['round']}/{game_data['total_rounds']}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏—Å—Ç–æ—Ä–∏—é! üòò"
    else:
        # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        story_text = "\n".join(game_data["story_parts"])
        response += f"üéâ –ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞! –ú—ã –Ω–∞–ø–∏—Å–∞–ª–∏ {state['score']} —á–∞—Å—Ç–µ–π! üòç\n\nüìñ –ù–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n{story_text}\n\n–¢—ã —Ç–∞–∫–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π! üíï"
        state["current_game"] = None
        state["game_data"] = {}
        state["score"] = 0
    
    return response

def end_current_game(user_id: int) -> str:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É."""
    state = get_game_state(user_id)
    if state["current_game"]:
        game_name = state["current_game"]
        state["current_game"] = None
        state["game_data"] = {}
        state["score"] = 0
        return f"–ò–≥—Ä–∞ '{game_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üòä"
    return "–ú—ã –Ω–µ –∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É —Å–µ–π—á–∞—Å üòä"
