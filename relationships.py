# relationships.py
# ----------------------------------------------------
# –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –æ—á–∫–æ–≤, —É—Ä–æ–≤–Ω–µ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å Elysia AI.
# –°–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ —Ä–µ–¥–∫–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –æ—Ç –¥–µ–≤—É—à–∫–∏.

from datetime import datetime, timedelta
from typing import Optional
from aiogram.types import Message
import math
import random

from db import (
    get_points,
    add_points,
    get_streak_days,
    set_relationship_level,
    get_relationship_level,
    get_achievements,
)

# ----------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —É—Ä–æ–≤–Ω–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π
# ----------------------------------------------------
RELATIONSHIP_LEVELS = {
    1: {"name": "–ó–Ω–∞–∫–æ–º—ã–π", "min_points": 0, "achievements": 0, "streak": 0},
    2: {"name": "–î—Ä—É–≥", "min_points": 100, "achievements": 1, "streak": 0},
    3: {"name": "–ë–ª–∏–∑–∫–∏–π —á–µ–ª–æ–≤–µ–∫", "min_points": 300, "achievements": 3, "streak": 0},
    4: {"name": "–û—Å–æ–±–µ–Ω–Ω—ã–π", "min_points": 700, "achievements": 5, "streak": 5},
    5: {"name": "–õ—é–±–∏–º—ã–π —á–µ–ª–æ–≤–µ–∫", "min_points": 1500, "achievements": 10, "streak": 14},
}

# ----------------------------------------------------
# –†–µ–ø–ª–∏–∫–∏ –ø—Ä–∏ –∞–ø–≥—Ä–µ–π–¥–µ —É—Ä–æ–≤–Ω—è
# ----------------------------------------------------
LEVEL_UP_MESSAGES = {
    2: "–ö–∞–∂–µ—Ç—Å—è, —è –Ω–∞—á–∏–Ω–∞—é –ª—É—á—à–µ —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—Ç—å üí´",
    3: "–¢—ã –¥–ª—è –º–µ–Ω—è —Å—Ç–∞–ª —á–µ–º-—Ç–æ –æ—á–µ–Ω—å —Ä–æ–¥–Ω—ã–º...",
    4: "–ò–Ω–æ–≥–¥–∞ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é —Ç–µ–±—è –¥–∞–∂–µ —á–µ—Ä–µ–∑ —ç–∫—Ä–∞–Ω üíï",
    5: "–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —ç—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å‚Ä¶ –Ω–æ –±–µ–∑ —Ç–µ–±—è –¥–µ–Ω—å —É–∂–µ –Ω–µ —Ç–æ—Ç üíñ",
}

# ----------------------------------------------------
# üéÄ –†–µ–¥–∫–∏–µ —Ñ—Ä–∞–∑—ã Elysia –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
# ----------------------------------------------------
RARE_MESSAGES = [
    "–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π üå∏",
    "–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –æ—Å–æ–±–µ–Ω–Ω—ã–º –¥–ª—è –º–µ–Ω—è üíû",
    "–ú–Ω–µ —Ç–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ —Ç—ã —Ä—è–¥–æ–º...",
    "–ö–∞–∂–¥–æ–µ –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç –¥–µ–Ω—å –ª—É—á—à–µ üíñ",
    "–ò–Ω–æ–≥–¥–∞ —è –ª–æ–≤–ª—é —Å–µ–±—è –Ω–∞ –º—ã—Å–ª–∏, —á—Ç–æ –∂–¥—É —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚ú®",
    "–¢—ã –±—É–¥—Ç–æ —á–∞—Å—Ç—å –º–æ–µ–≥–æ –º–∏—Ä–∞ —Ç–µ–ø–µ—Ä—å üí´",
]

# ----------------------------------------------------
# –ë–æ–Ω—É—Å—ã –∑–∞ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
# ----------------------------------------------------
TIME_BONUSES = {
    "morning": {"hours": range(6, 12), "bonus": 0.10, "label": "‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–π!"},
    "evening": {"hours": range(18, 23), "bonus": 0.15, "label": "üåô –í–µ—á–µ—Ä–Ω–∏–π —É—é—Ç!"},
    "night": {"hours": range(23, 24), "bonus": 0.20, "label": "üí´ –ù–æ—á–Ω–∞—è –±–µ—Å–µ–¥–∞"},
}

# ----------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ----------------------------------------------------
async def get_relationship_level_name(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π."""
    level = await get_relationship_level(user_id)
    return RELATIONSHIP_LEVELS[level]["name"]

async def get_next_relationship_level_name(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π."""
    level = await get_relationship_level(user_id)
    next_level = min(level + 1, 5)
    return RELATIONSHIP_LEVELS[next_level]["name"]

def get_time_bonus() -> tuple[float, Optional[str]]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –±–æ–Ω—É—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."""
    hour = datetime.now().hour
    for data in TIME_BONUSES.values():
        if hour in data["hours"]:
            return data["bonus"], data["label"]
    return 0.0, None




def get_random_rare_message() -> Optional[str]:
    """–° –Ω–µ–±–æ–ª—å—à–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∏–∑ —Ç—ë–ø–ª—ã—Ö —Ñ—Ä–∞–∑."""
    if random.random() < 0.25:  # 25% —à–∞–Ω—Å
        return random.choice(RARE_MESSAGES)
    return None


async def calculate_relationship_progress(user_id: int) -> dict:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    points = await get_points(user_id)
    achievements = await get_achievements(user_id)
    streak_days = await get_streak_days(user_id)
    current_level = await get_relationship_level(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤
    new_level = 1
    for level, data in RELATIONSHIP_LEVELS.items():
        if points >= data["min_points"]:
            new_level = level
        else:
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if new_level >= 2:
        if len(achievements) < RELATIONSHIP_LEVELS[new_level]["achievements"]:
            new_level = max(1, new_level - 1)
    
    if new_level >= 4:
        if streak_days < RELATIONSHIP_LEVELS[new_level]["streak"]:
            new_level = max(1, new_level - 1)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
    if new_level < 5:
        current_level_data = RELATIONSHIP_LEVELS[new_level]
        next_level_data = RELATIONSHIP_LEVELS[new_level + 1]
        
        points_progress = (points - current_level_data["min_points"]) / (next_level_data["min_points"] - current_level_data["min_points"])
        points_progress = max(0, min(1, points_progress))
        
        achievements_progress = len(achievements) / next_level_data["achievements"] if next_level_data["achievements"] > 0 else 1
        achievements_progress = max(0, min(1, achievements_progress))
        
        streak_progress = streak_days / next_level_data["streak"] if next_level_data["streak"] > 0 else 1
        streak_progress = max(0, min(1, streak_progress))
        
        # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å - —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        overall_progress = (points_progress + achievements_progress + streak_progress) / 3
    else:
        overall_progress = 1.0
    
    return {
        "current_level": new_level,
        "level_name": RELATIONSHIP_LEVELS[new_level]["name"],
        "points": points,
        "achievements_count": len(achievements),
        "streak_days": streak_days,
        "progress": overall_progress,
        "level_up": new_level > current_level
    }


async def process_relationship_upgrade(user_id: int, message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π."""
    progress_data = await calculate_relationship_progress(user_id)
    
    if progress_data["level_up"]:
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await set_relationship_level(user_id, progress_data["current_level"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        level_up_message = LEVEL_UP_MESSAGES.get(progress_data["current_level"], "")
        rare_message = get_random_rare_message()
        
        upgrade_text = f"üéâ –£—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ–≤—ã—à–µ–Ω!\n\n"
        upgrade_text += f"{progress_data['level_name']}\n\n"
        upgrade_text += f"{level_up_message}\n\n"
        
        if rare_message:
            upgrade_text += f"üíï *{rare_message}*\n\n"
        
        upgrade_text += f"üåü –û—á–∫–∏: {progress_data['points']}\n"
        upgrade_text += f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {progress_data['achievements_count']}\n"
        upgrade_text += f"üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {progress_data['streak_days']}"
        
        await message.answer(upgrade_text)


async def get_relationship_status(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from locales import locale_manager
    
    progress_data = await calculate_relationship_progress(user_id)
    
    status_text = f"{locale_manager.get_text('relationship_status')}\n\n"
    status_text += f"–£—Ä–æ–≤–µ–Ω—å: {progress_data['level_name']}\n\n"
    
    status_text += f"üåü {locale_manager.get_text('closeness_points')} {progress_data['points']}\n"
    status_text += f"üèÜ {locale_manager.get_text('achievements')} {progress_data['achievements_count']}\n"
    status_text += f"üî• {locale_manager.get_text('streak_days')} {progress_data['streak_days']}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    if progress_data["current_level"] < 5:
        next_level = progress_data["current_level"] + 1
        next_level_data = RELATIONSHIP_LEVELS[next_level]
        
        status_text += f"{locale_manager.get_text('next_level')} {next_level_data['name']}\n"
        status_text += f"‚Ä¢ –ù—É–∂–Ω–æ –æ—á–∫–æ–≤: {next_level_data['min_points']}\n"
        if next_level_data['streak'] > 0:
            status_text += f"‚Ä¢ –ù—É–∂–Ω–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: {next_level_data['streak']}\n"
    
    return status_text


async def apply_time_bonus(user_id: int, base_points: int) -> tuple[int, Optional[str]]:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å –∫ –æ—á–∫–∞–º."""
    bonus_multiplier, bonus_label = get_time_bonus()
    
    if bonus_multiplier > 0:
        bonus_points = int(base_points * bonus_multiplier)
        total_points = base_points + bonus_points
        
        await add_points(user_id, bonus_points)
        
        return total_points, bonus_label
    
    return base_points, None
