from __future__ import annotations

import asyncio
import os
import random
from datetime import datetime, timedelta
from functools import wraps

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.enums import ChatAction

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
from config import config
from validation import validator
from rate_limiter import rate_limiter, cleanup_task
from logger import bot_logger, log_performance
from error_handler import handle_errors, handle_telegram_errors, retry_on_error
from locales import locale_manager, Language
from yoomoney import payment_manager, cleanup_payments_task
from payment_system import payment_processor
from trial_system import trial_system
from admin_system import admin_system
from telegram_stars import stars_payment
from referral_system import referral_system

from db import (
    add_hearts, get_achievements, get_gender, get_girl, get_hearts,
    get_memory, get_mood, get_relationship_level, get_total_messages, get_user_name,
    grant_access, init_db, is_banned, save_message, set_gender,
    set_girl, set_mood, set_relationship_level, set_user_name, upsert_user,
    add_achievement, get_all_user_ids,
    add_points, get_points, get_level, level_up, update_streak, 
    get_streak_days, unlock_reward, get_unlocked_rewards, get_level_progress,
    get_user_trial_status, set_user_trial_status, ban_user, unset_ban,
    process_referral, has_referrer, process_subscription_referral
)
from llm import ask_llm
from memory import serialize_memory, get_memory_summary
from game_handlers import game_router, get_flirt_level, get_flirt_description
from personalization_handlers import personalization_router
from affinity_system import POINTS, REWARDS, ACHIEVEMENTS, get_level_description, get_level_phrase, calculate_compatibility, get_compatibility_message, check_achievements as check_affinity_achievements
from sympathy_system import SympathySystem, InteractionType
from personality_system import PersonalitySystem, MoodType
from advanced_memory import AdvancedMemorySystem
from relationships import process_relationship_upgrade, get_relationship_status, apply_time_bonus, get_relationship_level_name, get_next_relationship_level_name
from hot_pic_system import (
    hot_pic_manager, handle_hot_pic_message, start_hot_pic_mode, 
    send_first_hot_pic, send_hot_pic_with_caption, cleanup_expired_sessions_task
)
from utils import (
    TEXTS, MOODS, ACHIEVEMENTS, ROLEPLAY_GAMES,
    kb_tariff, kb_gender, kb_main_menu, kb_moods, kb_games,
    kb_roleplay_games, kb_roleplay_game_description, kb_roleplay_actions,
    format_hearts_message,
    get_next_achievement, get_girl_photo_path
)

# –§—Ä–∞–∑—ã –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–ü–µ—á–∞—Ç–∞–µ—Ç..."
THINKING_PHRASES = [
    "–ü–µ—á–∞—Ç–∞–µ—Ç... üí≠",
    "–ü–µ—á–∞—Ç–∞–µ—Ç... ü§î",
    "–ü–µ—á–∞—Ç–∞–µ—Ç... ‚ú®",
    "–ü–µ—á–∞—Ç–∞–µ—Ç... üíï",
    "–ü–µ—á–∞—Ç–∞–µ—Ç... üòä",
    "–ü–µ—á–∞—Ç–∞–µ—Ç... üíñ",
    "–ü–µ—á–∞—Ç–∞–µ—Ç... üòò",
    "–ü–µ—á–∞—Ç–∞–µ—Ç... üåü"
]

def send_typing_action(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    @wraps(func)
    async def wrapper(message: Message, state: FSMContext, *args, **kwargs):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        await asyncio.sleep(0.5)
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return await func(message, state, *args, **kwargs)
    return wrapper


def get_girls_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–≤—É—à–∫–∞–º–∏, –∏—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–º –∏ —Å–µ—Ä–¥–µ—á–∫–∞–º–∏."""
    girl_info = {
        "girl_sakura": {"name": locale_manager.get_text("girl_sakura"), "age": "20 –ª–µ—Ç" if locale_manager.get_language() == Language.RUSSIAN else "20 years"},
        "girl_reiko": {"name": locale_manager.get_text("girl_reiko"), "age": "24 –≥–æ–¥–∞" if locale_manager.get_language() == Language.RUSSIAN else "24 years"},
        "girl_ayane": {"name": locale_manager.get_text("girl_ayane"), "age": "28 –ª–µ—Ç" if locale_manager.get_language() == Language.RUSSIAN else "28 years"},
        "girl_hikari": {"name": locale_manager.get_text("girl_hikari"), "age": "26 –ª–µ—Ç" if locale_manager.get_language() == Language.RUSSIAN else "26 years"},
        "girl_yuki": {"name": locale_manager.get_text("girl_yuki"), "age": "22 –≥–æ–¥–∞" if locale_manager.get_language() == Language.RUSSIAN else "22 years"}
    }
    
    buttons = []
    for girl_id, info in girl_info.items():
        buttons.append([InlineKeyboardButton(
            text=f"‚ô• {info['name']} ({info['age']})", 
            callback_data=girl_id
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def show_thinking_indicator(chat_id: int) -> Message:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä '–ü–µ—á–∞—Ç–∞–µ—Ç...' —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π."""
    thinking_msg = random.choice(THINKING_PHRASES)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–µ—á–∞—Ç–∏
    return await bot.send_message(chat_id, thinking_msg)


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Onboarding(StatesGroup):
    language_selection = State()
    age_verification = State()
    choosing_tariff = State()
    asking_name = State()
    choosing_girl = State()

class RoleplayStates(StatesGroup):
    choosing_game = State()
    playing_game = State()


class Chatting(StatesGroup):
    active_chat = State()

class HotPicsStates(StatesGroup):
    waiting_for_prompt = State()
    generating_image = State()
    hot_pic_mode = State()


# Router
from aiogram import Router
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ main)
bot = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
sympathy_system = SympathySystem()
personality_system = PersonalitySystem()
memory_system = AdvancedMemorySystem()

async def check_premium_access(user_id: int, username: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if username and admin_system.is_admin(username):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        access_info = await grant_access(user_id, 0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π
        if access_info and access_info.get('has_access', False):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å
        trial_status = await get_user_trial_status(user_id)
        if trial_status == "active":
            return True
        
        return False
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Failed to check premium access for user {user_id}")
        return False

async def check_hot_pics_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Hot Pics (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    try:
        # Hot Pics –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–µ –ø—Ä–æ–±–Ω—ã–º
        access_info = await grant_access(user_id, 0)
        if access_info and access_info.get('has_access', False):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å
            trial_status = await get_user_trial_status(user_id)
            if trial_status != "active":
                return True
        
        return False
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Failed to check hot pics access for user {user_id}")
        return False




@router.message(Command("admin"))
@handle_errors
@handle_telegram_errors
async def admin_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã /admin"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if not admin_system.is_admin(message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(message.from_user.id, 'message'):
        await message.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    bot_logger.log_admin_action("admin_command", {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "text": message.text
    })
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        command_text = message.text.strip()
        parts = command_text.split()
        
        if len(parts) < 2:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            help_text = admin_system.get_admin_help()
            await message.answer(help_text)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        command = parts[1]
        args = parts[2:] if len(parts) > 2 else []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        result = await admin_system.process_admin_command(command, args)
        await message.answer(result)
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Admin command failed for user {message.from_user.id}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã")

@router.message(CommandStart())
@handle_errors
@handle_telegram_errors
async def start_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_validation = validator.validate_user_id(message.from_user.id)
    if not user_validation.is_valid:
        bot_logger.log_security_event("invalid_user_id", message.from_user.id, user_validation.error_message)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(message.from_user.id, 'command'):
        bot_logger.log_rate_limit(message.from_user.id, 'command', blocked=True)
        await message.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    bot_logger.log_command(message.from_user.id, "/start")
    
    await init_db()
    await upsert_user(message.from_user.id, message.from_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await is_banned(message.from_user.id):
        bot_logger.log_security_event("banned_user_attempt", message.from_user.id, "Attempted to start bot")
        await message.answer("–ò–∑–≤–∏–Ω–∏, —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    referrer_id = None
    if " " in message.text:
        try:
            referrer_candidate = int(message.text.split()[1])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Å–∞–º —Å–µ–±—è
            if message.from_user.id != referrer_candidate:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                if not await has_referrer(message.from_user.id):
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª
                    success = await referral_system.process_referral_registration(
                        message.from_user.id, referrer_candidate
                    )
                    if success:
                        referrer_id = referrer_candidate
                        bot_logger.log_info(f"Referral processed: {referrer_candidate} -> {message.from_user.id}")
        except (ValueError, IndexError):
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Å—ã–ª–∫–µ
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await state.set_state(Onboarding.language_selection)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if referrer_id:
        await message.answer(
            f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            f"–¢—ã –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∫—Ç–æ-—Ç–æ –∏–∑ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π —É–∂–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º.\n\n"
            f"Please select a language:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
                    [InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")]
                ]
            )
        )
    else:
        await message.answer(
            "Please select a language:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
                    [InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")]
                ]
            )
        )


@router.callback_query(F.data == "lang_ru")
async def language_ru_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞."""
    locale_manager.set_language(Language.RUSSIAN)
    await state.set_state(Onboarding.age_verification)
    await callback.message.edit_text(
        locale_manager.get_text("age_verification"),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=locale_manager.get_text("age_confirm"), callback_data="age_confirm")]
            ]
        )
    )
    await callback.answer()

@router.callback_query(F.data == "lang_en")
async def language_en_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞."""
    locale_manager.set_language(Language.ENGLISH)
    await state.set_state(Onboarding.age_verification)
    await callback.message.edit_text(
        locale_manager.get_text("age_verification"),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=locale_manager.get_text("age_confirm"), callback_data="age_confirm")]
            ]
        )
    )
    await callback.answer()

@router.callback_query(F.data == "age_confirm")
async def age_confirm_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞."""
    await callback.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
    await state.set_state(Onboarding.choosing_tariff)
    await callback.message.answer(
        locale_manager.get_text("welcome"),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=locale_manager.get_text("start_game"), callback_data="start_game")]
            ]
        )
    )


@router.callback_query(F.data == "start_game")
async def start_game_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'."""
    await callback.answer()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
    await state.set_state(Onboarding.asking_name)
    await callback.message.answer(locale_manager.get_text("ask_name"))


@router.message(Command("mood"))
async def mood_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mood - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≠–ª–∏–∑–∏–∏."""

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    current_mood = await personality_system.get_current_mood(message.from_user.id)
    mood_config = personality_system.mood_configs[current_mood]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_name = await get_user_name(message.from_user.id)
    relationship_level = await get_relationship_level(message.from_user.id)
    
    mood_text = f"""
{mood_config['emoji']} {locale_manager.get_text('mood_title')}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name or f"ID: {message.from_user.id}"}

üí≠ {locale_manager.get_text('current_mood')} {mood_config['description']}
üé≠ {locale_manager.get_text('communication_style')} {mood_config['response_style']}
üíñ {locale_manager.get_text('relationship_level')} {relationship_level}/5

{mood_config['emoji']} {random.choice(mood_config['phrases'])}
"""

    await message.answer(mood_text, reply_markup=kb_main_menu())



@router.message(Command("profile"))
async def profile_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å –æ—á–∫–∞–º–∏ –±–ª–∏–∑–æ—Å—Ç–∏."""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = await get_user_name(message.from_user.id)
    points = await get_points(message.from_user.id)
    level = await get_level(message.from_user.id)
    streak_days = await get_streak_days(message.from_user.id)
    hearts = await get_hearts(message.from_user.id)
    total_messages = await get_total_messages(message.from_user.id)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    compatibility = calculate_compatibility(points, level, streak_days)
    
    # –ü–æ–ª—É—á–∞–µ–º username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_display = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    level_description = get_level_description(level)
    
    profile_text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å {user_display}

üíñ –£—Ä–æ–≤–µ–Ω—å –±–ª–∏–∑–æ—Å—Ç–∏: {level}/10
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {level_description}

üåü –û—á–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏: {points}
üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streak_days}
üíï –°–µ—Ä–¥–µ—á–∫–∏: {hearts}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}

üí´ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≠–ª–∏–∑–∏–µ–π: {compatibility}%
{get_compatibility_message(compatibility)}
"""
    
    await message.answer(profile_text, reply_markup=kb_main_menu())


@router.message(Command("shop"))
async def shop_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop - –º–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥ –∑–∞ –æ—á–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏."""
    
    points = await get_points(message.from_user.id)
    unlocked_rewards = await get_unlocked_rewards(message.from_user.id)
    unlocked_names = {name for _, name in unlocked_rewards}
    
    shop_text = f"üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥\n\nüí∞ –¢–≤–æ–∏ –æ—á–∫–∏: {points}\n\n"
    
    for reward_id, reward_data in REWARDS.items():
        status = "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ" if reward_data["name"] in unlocked_names else f"üîí {reward_data['cost']} –æ—á–∫–æ–≤"
        shop_text += f"{reward_data['name']}\n"
        shop_text += f"üíé {reward_data['description']}\n"
        shop_text += f"üìä {status}\n\n"
    
    shop_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π /buy <–Ω–∞–∑–≤–∞–Ω–∏–µ> –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã!"
    
    await message.answer(shop_text, reply_markup=kb_main_menu())


@router.message(Command("relationships"))
async def relationships_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /relationships - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –≠–ª–∏–∑–∏–µ–π."""

    status_text = await get_relationship_status(message.from_user.id)
    await message.answer(status_text, reply_markup=kb_main_menu())


@router.message(Command("buy"))
async def buy_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥."""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy <–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã>")
        return
    
    reward_name = command_parts[1].strip()
    
    # –ò—â–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    reward_id = None
    for rid, rdata in REWARDS.items():
        if rdata["name"].lower() == reward_name.lower():
            reward_id = rid
            break
    
    if not reward_id:
        await message.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π /shop –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.")
        return
    
    reward_data = REWARDS[reward_id]
    points = await get_points(message.from_user.id)
    
    if points < reward_data["cost"]:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤! –ù—É–∂–Ω–æ {reward_data['cost']}, —É —Ç–µ–±—è {points}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ
    unlocked_rewards = await get_unlocked_rewards(message.from_user.id)
    unlocked_names = {name for _, name in unlocked_rewards}
    
    if reward_data["name"] in unlocked_names:
        await message.answer("‚úÖ –≠—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!")
        return
    
    # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    await add_points(message.from_user.id, -reward_data["cost"])
    success = await unlock_reward(message.from_user.id, reward_id, reward_data["name"])
    
    if success:
        await message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –Ω–∞–≥—Ä–∞–¥—É:\n"
            f"{reward_data['name']}\n"
            f"üíé {reward_data['description']}\n\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {reward_data['cost']} –æ—á–∫–æ–≤\n"
            f"üí´ –û—Å—Ç–∞–ª–æ—Å—å: {points - reward_data['cost']} –æ—á–∫–æ–≤"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–∞–≥—Ä–∞–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")








@router.callback_query(F.data == "trial")
async def tariff_trial_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."""
    await grant_access(callback.from_user.id, days=1, access_type="trial")
    await state.set_state(Onboarding.asking_name)
    await callback.answer()
    await callback.message.answer(TEXTS["ask_name"])


@router.callback_query(F.data == "paid")
async def tariff_paid_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."""
    await grant_access(callback.from_user.id, days=30, access_type="paid")
    await state.set_state(Onboarding.asking_name)
    await callback.answer()
    await callback.message.answer(TEXTS["ask_name"])


@router.message(Onboarding.asking_name)
async def enter_name_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    user_name = (message.text or "").strip()
    if not user_name:
        await message.answer(locale_manager.get_text("ask_name"))
        return
    
    await set_user_name(message.from_user.id, user_name)
    await set_gender(message.from_user.id, "male")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–µ–≤—É—à–∫–∏
    await state.set_state(Onboarding.choosing_girl)
    await message.answer(
        locale_manager.get_text("choose_girl", name=user_name) + "\n\n" + locale_manager.get_text("girl_description"),
        reply_markup=get_girls_keyboard()
    )






@router.callback_query(F.data == "start_chat")
async def start_chat_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞."""
    
    await state.set_state(Chatting.active_chat)
    await callback.answer()
    await callback.message.answer("üí¨ –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É! –Ø —Ç–∞–∫ –∂–¥—É —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –º–æ–π –º–∏–ª—ã–π üòò")


@router.message()
@handle_errors
@handle_telegram_errors
@send_typing_action
async def chat_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞."""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    message_validation = validator.validate_message(message.text or "", 'text')
    if not message_validation.is_valid:
        bot_logger.log_validation_error(message.from_user.id, "invalid_message", message.text or "")
        await message.answer("‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(message.from_user.id, 'message'):
        bot_logger.log_rate_limit(message.from_user.id, 'message', blocked=True)
        await message.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot_logger.log_message(message.from_user.id, message.text or "", "text")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Hot Pic —Ä–µ–∂–∏–º–µ
    current_state = await state.get_state()
    if current_state == HotPicsStates.hot_pic_mode:
        await handle_hot_pic_message(bot, message.from_user.id, message.text or "")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    girl = await get_girl(message.from_user.id)
    mood = await get_mood(message.from_user.id)
    relationship_level = await get_relationship_level(message.from_user.id)
    gender = await get_gender(message.from_user.id)
    total_messages = await get_total_messages(message.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ñ–ª–∏—Ä—Ç–∞
    flirt_level = get_flirt_level(total_messages)
    flirt_description = get_flirt_description(flirt_level)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(message.from_user.id, message.text or "", role="user")
    
    # ==================== –°–ò–°–¢–ï–ú–ê –û–ß–ö–û–í –°–ò–ú–ü–ê–¢–ò–ò ====================
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–∏–º–ø–∞—Ç–∏–∏
    sympathy_result = await sympathy_system.process_message(message.from_user.id, message.text or "")

    # –û–±–Ω–æ–≤–ª—è–µ–º streak –∏ –ø–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    streak_bonus = await update_streak(message.from_user.id)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –∫ –æ—á–∫–∞–º —Å–∏–º–ø–∞—Ç–∏–∏
    total_points, time_bonus_label = await apply_time_bonus(message.from_user.id, sympathy_result['points_change'])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    old_level = await get_level(message.from_user.id)
    await level_up(message.from_user.id)
    new_level = await get_level(message.from_user.id)

    # ==================== –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ù–ò–Ø –ò –ü–ê–ú–Ø–¢–ò ====================
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    mood_change = await personality_system.process_mood_change(message.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await memory_system.update_memory_context(message.from_user.id, message.text or "", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    memory_context = await memory_system.get_memory_context(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å
    mem_pairs = await get_memory(message.from_user.id, limit=10)
    mem_text = serialize_memory(mem_pairs)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ü–µ—á–∞—Ç–∞–µ—Ç..."
    thinking_msg = await show_thinking_indicator(message.chat.id)
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    await asyncio.sleep(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    from db import get_personalization_settings
    personalization_settings = await get_personalization_settings(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    reply = await ask_llm(
        message.text or "", 
        girl=girl, 
        mood=mood,
        relationship_level=relationship_level,
        memory=mem_text,
        gender=gender,
        flirt_level=flirt_level,
        flirt_description=flirt_description,
        memory_context=memory_context,
        current_mood=mood,
        personalization_settings=personalization_settings
    )
    
    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–¥—É–º–∞–µ—Ç"
    await thinking_msg.delete()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await save_message(message.from_user.id, reply, role="assistant")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Å–∏–º–ø–∞—Ç–∏–∏
    hearts_to_add = random.randint(1, 3)
    await add_hearts(message.from_user.id, hearts_to_add)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await check_achievements(message.from_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await message.answer(reply)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    await process_relationship_upgrade(message.from_user.id, message)
    
    # ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –°–ò–°–¢–ï–ú–ï –°–ò–ú–ü–ê–¢–ò–ò ====================
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@router.callback_query(F.data == "hearts")
async def hearts_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–∫–æ–≤."""
    hearts = await get_hearts(callback.from_user.id)
    total_messages = await get_total_messages(callback.from_user.id)
    
    await callback.answer()
    await callback.message.answer(
        format_hearts_message(hearts, total_messages),
        reply_markup=kb_main_menu()
    )




@router.callback_query(F.data == "relationships")
async def relationships_callback_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
    status_text = await get_relationship_status(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–º–ø–∞—Ç–∏–∏
    stats = await sympathy_system.get_user_stats(callback.from_user.id)
    user_name = await get_user_name(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    current_mood = await personality_system.get_current_mood(callback.from_user.id)
    mood_config = personality_system.mood_configs[current_mood]
    relationship_level = await get_relationship_level(callback.from_user.id)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    combined_text = f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name or f"ID: {callback.from_user.id}"}
üíñ –°—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –≠–ª–∏–∑–∏–µ–π: {await get_relationship_level_name(callback.from_user.id)}
–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {await get_next_relationship_level_name(callback.from_user.id)}

üíñ –£—Ä–æ–≤–µ–Ω—å —Å–∏–º–ø–∞—Ç–∏–∏: {stats['level']}/10
üåü –û—á–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏: {stats['points']}
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {stats['achievements_count']}
üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {stats['streak_days']}
üìÖ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {stats['days_active']}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
üí´ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {stats['points_to_next_level']} –æ—á–∫–æ–≤

{mood_config['emoji']} {locale_manager.get_text('mood_title')} 

üí≠ {locale_manager.get_text('current_mood')} {mood_config['description']}
üé≠ {locale_manager.get_text('communication_style')} {mood_config['response_style']}
üíñ {locale_manager.get_text('relationship_level')} {relationship_level}/5
"""

    await callback.answer()
    await callback.message.answer(combined_text, reply_markup=kb_main_menu())




@router.callback_query(F.data == "profile")
async def profile_callback_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = await get_user_name(callback.from_user.id)
    points = await get_points(callback.from_user.id)
    level = await get_level(callback.from_user.id)
    streak_days = await get_streak_days(callback.from_user.id)
    hearts = await get_hearts(callback.from_user.id)
    total_messages = await get_total_messages(callback.from_user.id)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    compatibility = calculate_compatibility(points, level, streak_days)
    
    # –ü–æ–ª—É—á–∞–µ–º username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_display = f"@{callback.from_user.username}" if callback.from_user.username else f"ID: {callback.from_user.id}"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    level_description = get_level_description(level)
    
    profile_text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å {user_display}

üíñ –£—Ä–æ–≤–µ–Ω—å –±–ª–∏–∑–æ—Å—Ç–∏: {level}/10
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {level_description}

üåü –û—á–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏: {points}
üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streak_days}
üíï –°–µ—Ä–¥–µ—á–∫–∏: {hearts}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}

üí´ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≠–ª–∏–∑–∏–µ–π: {compatibility}%
{get_compatibility_message(compatibility)}
"""
    
    await callback.answer()
    await callback.message.answer(profile_text, reply_markup=kb_main_menu())


@router.callback_query(F.data == "games")
async def games_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä."""
    await callback.answer()
    await callback.message.answer("üéÆ –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π, –º–æ–π –º–∏–ª—ã–π üòò:", reply_markup=kb_games())





@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await callback.message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞! üòä\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. "
        "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–µ–±–µ, –ø–æ–¥–µ–ª–∏—Å—å –º—ã—Å–ª—è–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º! üíï\n\n"
        "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=kb_main_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "trial_day")
@handle_errors
@handle_telegram_errors
async def trial_day_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–Ω—è."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(callback.from_user.id, 'callback'):
        await callback.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    bot_logger.log_callback(callback.from_user.id, "trial_day")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –¥–Ω—è
        trial_status = await trial_system.check_trial_status(callback.from_user.id)
        
        if trial_status["trial_active"]:
            await callback.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å!", show_alert=True)
            return
        
        if trial_status["trial_used"]:
            trial_text = """
‚ùå –ü—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å. 

üí≥ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 169 ‚ÇΩ/–º–µ—Å—è—Ü
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: Hot Pics –∏ —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
"""
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="shop")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ]
            )
            
            await callback.message.edit_text(trial_text, reply_markup=keyboard)
            await callback.answer()
            return
        
        if not trial_status["can_get_trial"]:
            await callback.answer("‚ùå –ü—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å
        result = await trial_system.activate_trial(callback.from_user.id)
        
        if result["success"]:
            trial_text = f"""
‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–µ–Ω—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

üéâ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏:
‚Ä¢ 24 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–∞–º –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ Hot Pics –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
‚Ä¢ –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)

üí≥ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –¥–Ω—è:
–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 169 ‚ÇΩ/–º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="shop")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )
            
            await callback.message.edit_text(trial_text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–Ω—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                    ]
                )
            )
        
        await callback.answer()
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Trial day activation failed for user {callback.from_user.id}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–Ω—è", show_alert=True)

@router.callback_query(F.data == "premium_subscription")
@handle_errors
@handle_telegram_errors
async def premium_subscription_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if admin_system.is_admin(callback.from_user.username):
        await callback.message.edit_text(
            "üëë –ê–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(callback.from_user.id, 'callback'):
        await callback.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    bot_logger.log_callback(callback.from_user.id, "premium_subscription")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞
        invoice_data = stars_payment.create_payment_invoice_data()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
        await callback.message.answer_invoice(**invoice_data)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await callback.message.edit_text(
            "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!\n\n"
            "‚úÖ –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:\n"
            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∏–≥—Ä–∞–º\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            "‚Ä¢ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞\n\n"
            "üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 ‚≠ê\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )
        )
        
        await callback.answer()
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Failed to process premium subscription request for user {callback.from_user.id}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("game:"))
async def game_choice_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã."""
    _, game_type = callback.data.split(":", 1)
    await callback.answer()
    
    if game_type == "associations":
        await callback.message.answer("–ò–≥—Ä–∞–µ–º –≤ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏! –ù–∞–ø–∏—à–∏ /associations —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")
    elif game_type == "riddles":
        await callback.message.answer("–ò–≥—Ä–∞–µ–º –≤ –∑–∞–≥–∞–¥–∫–∏! –ù–∞–ø–∏—à–∏ /riddles —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")
    elif game_type == "story":
        await callback.message.answer("–ò–≥—Ä–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é! –ù–∞–ø–∏—à–∏ /story —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")




@router.callback_query(F.data == "personalize")
async def personalize_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏."""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)
    from personalization_handlers import start_personalization
    await start_personalization(callback.message, state)
    await callback.answer()




@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    
    await state.set_state(Chatting.active_chat)
    await callback.answer()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –º–æ–π –¥–æ—Ä–æ–≥–æ–π üíï:", reply_markup=kb_main_menu())




async def check_achievements(user_id: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    points = await get_points(user_id)
    level = await get_level(user_id)
    streak_days = await get_streak_days(user_id)
    total_messages = await get_total_messages(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    should_unlock = check_affinity_achievements(points, level, streak_days, total_messages)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    current_achievements = await get_achievements(user_id)
    current_achievement_ids = [ach[1] for ach in current_achievements]  # ach[1] —ç—Ç–æ achievement_type
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    for achievement_id in should_unlock:
        if achievement_id not in current_achievement_ids:
            await add_achievement(user_id, achievement_id)




async def relationship_level_task() -> None:
    """–ó–∞–¥–∞—á–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π."""
    while True:
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        
        user_ids = await get_all_user_ids()
        for uid in user_ids:
            try:
                    hearts = await get_hearts(uid)
                    current_level = await get_relationship_level(uid)
                    
                    # –õ–æ–≥–∏–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
                    new_level = min(5, (hearts // 20) + 1)
                    if new_level > current_level:
                        await set_relationship_level(uid, new_level)
            except Exception:
                continue


@log_performance("bot_startup")
async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    global bot
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    bot_logger.log_startup("2.0.0")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    token = config.api.telegram_token
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    token_validation = validator.validate_api_key(token)
    if not token_validation.is_valid:
        raise RuntimeError(f"Invalid Telegram Bot Token: {token_validation.error_message}")
    
    await init_db()
    
    bot = Bot(token=token)
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é bot –≤ game_handlers –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏
    import game_handlers
    game_handlers.bot = bot
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é bot –≤ personalization_handlers –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏
    import personalization_handlers
    personalization_handlers.bot = bot
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é bot –≤ payment_handlers –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏
    import payment_handlers
    import stars_payment_handlers
    import referral_handlers
    payment_handlers.bot = bot
    stars_payment_handlers.bot = bot
    referral_handlers.bot = bot
    
    dp = Dispatcher()
    dp.include_router(game_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–π —Ä–æ—É—Ç–µ—Ä –ø–µ—Ä–≤—ã–º
    dp.include_router(personalization_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    dp.include_router(payment_handlers.payment_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
    dp.include_router(stars_payment_handlers.stars_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π –≤ –∑–≤–µ–∑–¥–∞—Ö
    dp.include_router(referral_handlers.referral_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    # asyncio.create_task(daily_greeting_task(bot))  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # asyncio.create_task(daily_evening_task(bot))   # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    asyncio.create_task(relationship_level_task())
    asyncio.create_task(cleanup_expired_sessions_task(bot))
    asyncio.create_task(cleanup_task())  # –û—á–∏—Å—Ç–∫–∞ rate limiter
    asyncio.create_task(cleanup_payments_task())  # –û—á–∏—Å—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        bot_logger.log_shutdown()
    except Exception as e:
        bot_logger.log_system_error(e, "Fatal error in main loop")
        raise


@router.callback_query(F.data.startswith("girl_"))
async def girl_choice_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–≤—É—à–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–µ–≤—É—à–∫–µ
    girl_info = {
        "girl_sakura": {
            "name": "–°–∞–∫—É—Ä–∞ –¢–∞–Ω–∞–∫–∞",
            "age": "20 –ª–µ—Ç",
            "profession": "–í–ª–∞–¥–µ–ª–∏—Ü–∞ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞",
            "description": "–ó–∞—Å—Ç–µ–Ω—á–∏–≤–∞—è –∏ –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∞—è, —Å–Ω–∞—Ä—É–∂–∏ –Ω–µ–∂–Ω—ã–π —Ü–≤–µ—Ç–æ–∫, –Ω–æ –≤–Ω—É—Ç—Ä–∏ —Ç–∞–∏—Ç—Å—è —Å—Ç—Ä–∞—Å—Ç—å. –§–µ—Ç–∏—à: —ç–∫—Å–≥–∏–±–∏—Ü–∏–æ–Ω–∏–∑–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ."
        },
        "girl_reiko": {
            "name": "–†—ç–π–∫–æ –ö—É—Ä–æ–≥–∞–Ω–µ",
            "age": "24 –≥–æ–¥–∞",
            "profession": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —é—Ä–∏—Å—Ç",
            "description": "–•–æ–ª–æ–¥–Ω–∞—è –∏ —Ü–∏–Ω–∏—á–Ω–∞—è, –µ—ë –±—Ä–æ–Ω—è –Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–∞, –Ω–æ –æ–Ω–∞ –∂–∞–∂–¥–µ—Ç, —á—Ç–æ–±—ã –∫—Ç–æ-—Ç–æ —Å–∏–ª—å–Ω—ã–π –∑–∞—Å—Ç–∞–≤–∏–ª –µ—ë —Ç—Ä–µ—Å–Ω—É—Ç—å. –§–µ—Ç–∏—à: –±—Ä–∞—Ç—Ç–∏–Ω–≥ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç—Ä–æ–ª—è."
        },
        "girl_ayane": {
            "name": "–ê—è–Ω–µ –®–∏–Ω–æ",
            "age": "28 –ª–µ—Ç",
            "profession": "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç–∫–∞",
            "description": "–ó–∞–≥–∞–¥–æ—á–Ω–∞—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∞—è, –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å –∫–∞–∫ –≤—ã—Å—à—É—é —Ñ–æ—Ä–º—É –º–∞–≥–∏–∏. –§–µ—Ç–∏—à: –≥–∏–ø–Ω–æ—Ç–∏—á–µ—Å–∫–∏–π –∏ —Å–µ–Ω—Å–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å."
        },
        "girl_hikari": {
            "name": "–•–∏–∫–∞—Ä–∏ –ú–æ—Ä–∏",
            "age": "26 –ª–µ—Ç",
            "profession": "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞",
            "description": "–ó–∞–±–æ—Ç–ª–∏–≤–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è, –Ω–æ –µ—ë –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –∑–∞–±–æ—Ç–∞ –∏–º–µ–µ—Ç —Ç—ë–º–Ω—É—é, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É. –§–µ—Ç–∏—à: –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã."
        },
        "girl_yuki": {
            "name": "–Æ–∫–∏ –ö–∞–º–∏—è",
            "age": "22 –≥–æ–¥–∞", 
            "profession": "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∫–∞",
            "description": "–°–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–∞—è –∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è, –æ–±–æ–∂–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å. –§–µ—Ç–∏—à: –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–Ω–∏–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–∫–∞–∑–Ω–æ–π –∏–≥–Ω–æ—Ä."
        }
    }
    
    info = girl_info.get(callback.data, {
        "name": "–ü–æ–¥—Ä—É–≥–∞",
        "age": "?",
        "profession": "?",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–µ–≤—É—à–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_girl=callback.data)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–µ–≤—É—à–∫–∏
    photo_path = get_girl_photo_path(callback.data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if os.path.exists(photo_path):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        photo_file = FSInputFile(photo_path)
        await callback.message.answer_photo(
            photo=photo_file,
            caption=f"{info['name']} ({info['age']})\n"
                    f"{info['profession']}\n\n"
                    f"{info['description']}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{callback.data}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_girls")]
                ]
            )
        )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback.message.answer(
            f"{info['name']} ({info['age']})\n"
            f"{info['profession']}\n\n"
            f"{info['description']}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{callback.data}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_girls")]
                ]
            )
        )


@router.callback_query(F.data.startswith("select_"))
async def select_girl_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–µ–≤—É—à–∫–∏."""
    await callback.answer()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–µ–≤—É—à–∫–µ
    girl_data = await state.get_data()
    selected_girl = girl_data.get('selected_girl', 'girl_sakura')
    girl_mapping = {
        "girl_sakura": "–°–∞–∫—É—Ä–∞ –¢–∞–Ω–∞–∫–∞",
        "girl_reiko": "–†—ç–π–∫–æ –ö—É—Ä–æ–≥–∞–Ω–µ",
        "girl_ayane": "–ê—è–Ω–µ –®–∏–Ω–æ",
        "girl_hikari": "–•–∏–∫–∞—Ä–∏ –ú–æ—Ä–∏",
        "girl_yuki": "–Æ–∫–∏ –ö–∞–º–∏—è"
    }
    girl_name = girl_mapping.get(selected_girl, "–ü–æ–¥—Ä—É–≥–∞")
    await set_girl(callback.from_user.id, girl_name)
    await grant_access(callback.from_user.id, 7, "trial")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–µ–≤—É—à–∫–∏
    await state.set_state(Chatting.active_chat)
    await callback.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å {girl_name} üíï\n\n"
        f"{TEXTS['welcome']}",
        reply_markup=kb_main_menu()
    )


@router.callback_query(F.data == "back_to_girls")
async def back_to_girls_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–µ–≤—É—à–µ–∫."""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = await get_user_name(callback.from_user.id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–≤—É—à–∫–∏
    await state.set_state(Onboarding.choosing_girl)
    await callback.message.answer(
        f"üíñ –ü—Ä–∏–≤–µ—Ç, {user_name}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–≤—É—à–∫—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ:\n\n"
        "üí° –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –¥–µ–≤—É—à–∫–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É c –∏–º–µ–Ω–µ–º ^^",
        reply_markup=get_girls_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä
@router.callback_query(F.data == "roleplay")
async def roleplay_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä."""
    await callback.answer()
    await state.set_state(RoleplayStates.choosing_game)
    await callback.message.answer(
        "üîû –í—ã–±–µ—Ä–∏ —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É:",
        reply_markup=kb_roleplay_games()
    )


@router.callback_query(F.data.startswith("roleplay_game:"))
async def roleplay_game_description_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã."""
    await callback.answer()
    
    game_key = callback.data.split(":")[1]
    game_data = ROLEPLAY_GAMES.get(game_key)
    
    if not game_data:
        await callback.message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await callback.message.answer(
        f"üîû {game_data['name']}\n\n"
        f"{game_data['description']}",
        reply_markup=kb_roleplay_game_description(game_key),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("start_roleplay:"))
async def start_roleplay_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã."""
    await callback.answer()
    
    game_key = callback.data.split(":")[1]
    game_data = ROLEPLAY_GAMES.get(game_key)
    
    if not game_data:
        await callback.message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_roleplay_game=game_key)
    await state.set_state(RoleplayStates.playing_game)
    
    await callback.message.answer(
        f"üîû {game_data['name']}\n\n"
        f"{game_data['start_message']}",
        reply_markup=kb_roleplay_actions(),
        parse_mode="Markdown"
    )


@router.message(RoleplayStates.playing_game)
async def roleplay_chat_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
    data = await state.get_data()
    game_key = data.get("current_roleplay_game")
    
    if not game_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    game_data = ROLEPLAY_GAMES.get(game_key)
    if not game_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–µ–≤—É—à–∫–∏
    girl = await get_girl(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã
    roleplay_prompt = f"""
–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –≤ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–µ "{game_data['name']}".
–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏: {game_data['description']}

–í–ê–ñ–ù–û:
- –û—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–æ–ª–∏ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π –∏–≥—Ä—ã
- –í –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ –¥–æ–±–∞–≤–ª—è–π –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö *–¥–µ–π—Å—Ç–≤–∏–µ*
- –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –∏–≥—Ä–∞–µ—à—å
- –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –∏ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–π –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
- –°–æ—Ö—Ä–∞–Ω—è–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ —Ç–æ–Ω —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message.text}
"""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    from db import get_personalization_settings
    personalization_settings = await get_personalization_settings(message.from_user.id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = await ask_llm(
        roleplay_prompt,
        girl=girl,
        mood="playful",
        relationship_level=await get_relationship_level(message.from_user.id),
        gender=await get_gender(message.from_user.id),
        flirt_level=get_flirt_level(await get_total_messages(message.from_user.id)),
        flirt_description=get_flirt_description(get_flirt_level(await get_total_messages(message.from_user.id))),
        personalization_settings=personalization_settings
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        response,
        reply_markup=kb_roleplay_actions()
    )


@router.callback_query(F.data == "end_roleplay")
async def end_roleplay_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã."""
    await callback.answer()
    await state.clear()
    await callback.message.answer(
        "üîû –†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=kb_main_menu()
    )


# ==================== HOT PIC –†–ï–ñ–ò–ú ====================

@router.callback_query(F.data == "hot_pics")
async def hot_pics_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Hot Pic —Ä–µ–∂–∏–º–∞."""
    await callback.answer()
    await start_hot_pic_mode(bot, callback.from_user.id)


@router.callback_query(F.data == "hot_pic_start")
async def hot_pic_start_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ Hot Pic —Ä–µ–∂–∏–º–∞."""
    await callback.answer()
    await state.set_state(HotPicsStates.hot_pic_mode)
    await send_first_hot_pic(bot, callback.from_user.id)


@router.callback_query(F.data == "hot_pic_cancel")
async def hot_pic_cancel_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã Hot Pic —Ä–µ–∂–∏–º–∞."""
    await callback.answer()
    hot_pic_manager.end_session(callback.from_user.id)
    await callback.message.answer(
        "‚ùå Hot Pic —Ä–µ–∂–∏–º –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=kb_main_menu()
    )




@router.callback_query(F.data == "hot_pic_exit")
async def hot_pic_exit_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ Hot Pic —Ä–µ–∂–∏–º–∞."""
    await callback.answer()
    hot_pic_manager.end_session(callback.from_user.id)
    await state.clear()
    await callback.message.answer(
        "‚ùå Hot Pic —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=kb_main_menu()
    )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass