"""
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
"""

import asyncio
import traceback
from typing import Optional, Callable, Any, Dict
from functools import wraps
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest, TelegramConflictError
from aiogram.types import Message, CallbackQuery
from logger import bot_logger

class BotError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    def __init__(self, message: str, user_id: Optional[int] = None, error_code: Optional[str] = None):
        self.message = message
        self.user_id = user_id
        self.error_code = error_code
        super().__init__(message)

class ValidationError(BotError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass

class RateLimitError(BotError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    pass

class DatabaseError(BotError):
    """–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    pass

class APIError(BotError):
    """–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
    pass

class ErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.error_messages = {
            'validation_error': "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            'rate_limit_error': "‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            'database_error': "üîß –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            'api_error': "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            'telegram_error': "üì± –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            'unknown_error': "‚ùì –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }
    
    async def handle_error(self, error: Exception, user_id: Optional[int] = None, context: str = "") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        bot_logger.log_system_error(error, context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(error, ValidationError):
            bot_logger.log_validation_error(user_id or 0, "validation", str(error))
            return self.error_messages['validation_error']
        
        elif isinstance(error, RateLimitError):
            bot_logger.log_rate_limit(user_id or 0, "general", blocked=True)
            return self.error_messages['rate_limit_error']
        
        elif isinstance(error, DatabaseError):
            bot_logger.log_database_operation("error", "unknown", user_id)
            return self.error_messages['database_error']
        
        elif isinstance(error, APIError):
            bot_logger.log_api_request("error", 500, 0.0)
            return self.error_messages['api_error']
        
        elif isinstance(error, TelegramAPIError):
            bot_logger.log_system_error(error, f"Telegram API error for user {user_id}")
            return self.error_messages['telegram_error']
        
        else:
            bot_logger.log_system_error(error, f"Unknown error for user {user_id}")
            return self.error_messages['unknown_error']
    
    async def send_error_message(self, message: Message, error: Exception, context: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user_message = await self.handle_error(error, message.from_user.id, context)
            await message.answer(user_message)
        except Exception as e:
            bot_logger.log_system_error(e, "Failed to send error message")
    
    async def send_error_callback(self, callback: CallbackQuery, error: Exception, context: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ callback"""
        try:
            user_message = await self.handle_error(error, callback.from_user.id, context)
            await callback.answer(user_message, show_alert=True)
        except Exception as e:
            bot_logger.log_system_error(e, "Failed to send error callback")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_errors(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            error_handler = ErrorHandler()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            user_id = None
            for arg in args:
                if hasattr(arg, 'from_user'):
                    user_id = arg.from_user.id
                    break
                elif hasattr(arg, 'user_id'):
                    user_id = arg.user_id
                    break
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await error_handler.handle_error(e, user_id, f"Error in {func.__name__}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ Message –∏–ª–∏ CallbackQuery, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            for arg in args:
                if isinstance(arg, Message):
                    await error_handler.send_error_message(arg, e)
                    break
                elif isinstance(arg, CallbackQuery):
                    await error_handler.send_error_callback(arg, e)
                    break
    
    return wrapper

def handle_telegram_errors(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram API"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except TelegramConflictError as e:
            bot_logger.log_system_error(e, "Telegram conflict - multiple bot instances")
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        except TelegramBadRequest as e:
            bot_logger.log_system_error(e, "Telegram bad request")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            for arg in args:
                if isinstance(arg, Message):
                    await arg.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    break
                elif isinstance(arg, CallbackQuery):
                    await arg.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", show_alert=True)
                    break
        except TelegramAPIError as e:
            bot_logger.log_system_error(e, "Telegram API error")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            for arg in args:
                if isinstance(arg, Message):
                    await arg.answer("üì± –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    break
                elif isinstance(arg, CallbackQuery):
                    await arg.answer("üì± –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram.", show_alert=True)
                    break
    
    return wrapper

def retry_on_error(max_retries: int = 3, delay: float = 1.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs):
            last_error = None
            current_delay = delay  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            
            for attempt in range(max_retries):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    last_error = e
                    if attempt < max_retries - 1:
                        bot_logger.logger.warning(f"Attempt {attempt + 1} failed, retrying in {current_delay}s: {e}")
                        await asyncio.sleep(current_delay)
                        current_delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    else:
                        bot_logger.log_system_error(e, f"All {max_retries} attempts failed")
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –ø–æ–¥–Ω–∏–º–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
            raise last_error
        
        return wrapper
    return decorator

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
error_handler = ErrorHandler()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
def create_validation_error(message: str, user_id: Optional[int] = None) -> ValidationError:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return ValidationError(message, user_id, "VALIDATION_ERROR")

def create_rate_limit_error(user_id: int) -> RateLimitError:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"""
    return RateLimitError("Rate limit exceeded", user_id, "RATE_LIMIT_ERROR")

def create_database_error(message: str, user_id: Optional[int] = None) -> DatabaseError:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return DatabaseError(message, user_id, "DATABASE_ERROR")

def create_api_error(message: str, user_id: Optional[int] = None) -> APIError:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ API"""
    return APIError(message, user_id, "API_ERROR")
