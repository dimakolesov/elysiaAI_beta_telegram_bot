"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≠–ª–∏–∑–∏–∏
"""

import asyncio
from functools import wraps
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatAction

from states import PersonalizationStates
from personalization_system import PersonalizationSystem, PersonalityType, CommunicationStyle
from db import get_user_name
from utils import TEXTS

personalization_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ main.py)
bot = None

def send_typing_action(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞."""
    @wraps(func)
    async def wrapper(message: types.Message, *args, **kwargs):
        if bot:
            await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
            await asyncio.sleep(1)
        return await func(message, *args, **kwargs)
    return wrapper

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
personalization_system = PersonalizationSystem()

@personalization_router.message(Command("personalize"))
async def start_personalization(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏."""
    await state.set_state(PersonalizationStates.choosing_personality)
    
    text = "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≠–ª–∏–∑–∏–∏\n\n"
    text += "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è! üíï\n\n"
    text += "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∏–¥–µ–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –º–µ–Ω—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ.\n\n"
    text += "–®–∞–≥ 1/4: –í—ã–±–µ—Ä–∏ –º–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –ª–∏—á–Ω–æ—Å—Ç–∏
    keyboard_data = personalization_system.get_personality_keyboard_data()
    buttons = []
    
    for row in keyboard_data:
        button_row = []
        for text, callback_data in row:
            button_row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
        buttons.append(button_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@personalization_router.callback_query(F.data.startswith("personality:"))
async def handle_personality_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏."""
    personality_name = callback.data.split(":")[1]
    personality = personalization_system.get_personality_by_name(personality_name)
    
    if not personality:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏
    await state.update_data(selected_personality=personality.value)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    preview = personalization_system.get_personality_preview(personality)
    
    text = "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≠–ª–∏–∑–∏–∏\n\n"
    text += f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏:\n\n{preview}\n\n"
    text += "–®–∞–≥ 2/4: –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —è –±—É–¥—É —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∏–ª—è–º–∏ –æ–±—â–µ–Ω–∏—è
    keyboard_data = personalization_system.get_communication_style_keyboard_data()
    buttons = []
    
    for row in keyboard_data:
        button_row = []
        for text, callback_data in row:
            button_row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
        buttons.append(button_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_personality"),
        InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_style")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await state.set_state(PersonalizationStates.choosing_communication_style)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@personalization_router.callback_query(F.data.startswith("style:"))
async def handle_communication_style_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è."""
    style_name = callback.data.split(":")[1]
    style = personalization_system.get_communication_style_by_name(style_name)
    
    if not style:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    await state.update_data(selected_communication_style=style.value)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    preview = personalization_system.get_communication_style_preview(style)
    
    text = "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≠–ª–∏–∑–∏–∏\n\n"
    text += f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:\n\n{preview}\n\n"
    text += "–®–∞–≥ 3/4: –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞?\n\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
    text += "‚Ä¢ –õ—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤ üê±\n"
    text += "‚Ä¢ –£–≤–ª–µ–∫–∞–µ—Ç—Å—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏–µ–π üåü\n"
    text += "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º üá´üá∑\n"
    text += "‚Ä¢ –û–±–æ–∂–∞–µ—Ç —à–æ–∫–æ–ª–∞–¥ üç´\n"
    text += "‚Ä¢ –ë–æ–∏—Ç—Å—è –ø–∞—É–∫–æ–≤ üï∑Ô∏è\n\n"
    text += "–≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π!"
    
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —á–µ—Ä—Ç—ã", callback_data="add_traits")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_traits")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_style")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await state.set_state(PersonalizationStates.custom_traits)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@personalization_router.callback_query(F.data == "add_traits")
async def handle_add_traits(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —á–µ—Ä—Ç."""
    text = "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≠–ª–∏–∑–∏–∏\n\n"
    text += "‚úèÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞\n\n"
    text += "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –æ—Å–æ–±—ã–µ —á–µ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç –º–µ–Ω—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –¥–ª—è —Ç–µ–±—è.\n\n"
    text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
    text += "‚Ä¢ –õ—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤ üê±\n"
    text += "‚Ä¢ –£–≤–ª–µ–∫–∞–µ—Ç—Å—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏–µ–π üåü\n"
    text += "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º üá´üá∑\n"
    text += "‚Ä¢ –û–±–æ–∂–∞–µ—Ç —à–æ–∫–æ–ª–∞–¥ üç´\n"
    text += "‚Ä¢ –ë–æ–∏—Ç—Å—è –ø–∞—É–∫–æ–≤ üï∑Ô∏è\n"
    text += "‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –º–∞—Ä–∫–∏ üìÆ\n"
    text += "‚Ä¢ –ò–≥—Ä–∞–µ—Ç –Ω–∞ –ø–∏–∞–Ω–∏–Ω–æ üéπ\n\n"
    text += "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∫–∞–∂–¥—É—é —á–µ—Ä—Ç—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):"
    
    buttons = [
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_traits")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_style")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@personalization_router.message(PersonalizationStates.custom_traits)
@send_typing_action
async def handle_traits_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —á–µ—Ä—Ç."""
    traits_text = message.text.strip()
    
    if not traits_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã
    traits = [t.strip() for t in traits_text.split('\n') if t.strip()]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä—Ç—ã
    await state.update_data(custom_traits=traits)
    
    text = "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≠–ª–∏–∑–∏–∏\n\n"
    text += f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:\n\n"
    for trait in traits:
        text += f"‚Ä¢ {trait}\n"
    
    text += "\n–®–∞–≥ 4/4: –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –º–æ–∏ –ª—é–±–∏–º—ã–µ —Ñ—Ä–∞–∑—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è!\n\n"
    text += "–≠—Ç–æ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –±—É–¥—É —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏ —Å —Ç–æ–±–æ–π:\n\n"
    text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
    text += "‚Ä¢ '–ú–æ–π –¥–æ—Ä–æ–≥–æ–π' üíï\n"
    text += "‚Ä¢ '–ö–∞–∫ –∂–µ —ç—Ç–æ –º–∏–ª–æ!' ‚ú®\n"
    text += "‚Ä¢ '–¢—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–ª–µ—Å—Ç—å!' üòä\n"
    text += "‚Ä¢ '–û –±–æ–∂–µ—á–∫–∏!' üòÆ\n"
    text += "‚Ä¢ '–≠—Ç–æ –∂–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!' üåü\n\n"
    text += "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ —Ñ—Ä–∞–∑—ã (–∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):"
    
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—ã", callback_data="add_phrases")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_phrases")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_traits")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await state.set_state(PersonalizationStates.custom_phrases)
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@personalization_router.callback_query(F.data == "add_phrases")
async def handle_add_phrases(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª—é–±–∏–º—ã—Ö —Ñ—Ä–∞–∑."""
    text = "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≠–ª–∏–∑–∏–∏\n\n"
    text += "üí≠ –õ—é–±–∏–º—ã–µ —Ñ—Ä–∞–∑—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n\n"
    text += "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –±—É–¥—É —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏ —Å —Ç–æ–±–æ–π.\n\n"
    text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
    text += "‚Ä¢ '–ú–æ–π –¥–æ—Ä–æ–≥–æ–π' üíï\n"
    text += "‚Ä¢ '–ö–∞–∫ –∂–µ —ç—Ç–æ –º–∏–ª–æ!' ‚ú®\n"
    text += "‚Ä¢ '–¢—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–ª–µ—Å—Ç—å!' üòä\n"
    text += "‚Ä¢ '–û –±–æ–∂–µ—á–∫–∏!' üòÆ\n"
    text += "‚Ä¢ '–≠—Ç–æ –∂–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!' üåü\n"
    text += "‚Ä¢ '–¢—ã –º–µ–Ω—è —É–¥–∏–≤–ª—è–µ—à—å!' ü§©\n"
    text += "‚Ä¢ '–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!' ü§î\n\n"
    text += "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ —Ñ—Ä–∞–∑—ã (–∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):"
    
    buttons = [
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_phrases")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_traits")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@personalization_router.message(PersonalizationStates.custom_phrases)
@send_typing_action
async def handle_phrases_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª—é–±–∏–º—ã—Ö —Ñ—Ä–∞–∑."""
    phrases_text = message.text.strip()
    
    if not phrases_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ñ—Ä–∞–∑—ã –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    phrases = [p.strip() for p in phrases_text.split('\n') if p.strip()]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—ã
    await state.update_data(custom_phrases=phrases)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await show_confirmation(message, state)

async def show_confirmation(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    data = await state.get_data()
    
    personality = personalization_system.get_personality_by_name(data.get('selected_personality', 'sweet'))
    style = personalization_system.get_communication_style_by_name(data.get('selected_communication_style', 'casual'))
    custom_traits = data.get('custom_traits', [])
    custom_phrases = data.get('custom_phrases', [])
    
    if personality and style:
        personality_config = personalization_system.get_personality_config(personality)
        style_config = personalization_system.get_communication_style_config(style)
        
        text = "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≠–ª–∏–∑–∏–∏\n\n"
        text += "‚ú® –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ—è –∏–¥–µ–∞–ª—å–Ω–∞—è –≠–ª–∏–∑–∏—è:\n\n"
        
        text += f"üë§ –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {personality_config['name']} {personality_config['emoji']}\n"
        text += f"_{personality_config['description']}_\n\n"
        
        text += f"üí¨ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {style_config['name']} {style_config['emoji']}\n"
        text += f"_{style_config['description']}_\n\n"
        
        if custom_traits:
            text += f"üåü –û—Å–æ–±—ã–µ —á–µ—Ä—Ç—ã:\n"
            for trait in custom_traits:
                text += f"‚Ä¢ {trait}\n"
            text += "\n"
        
        if custom_phrases:
            text += f"üí≠ –õ—é–±–∏–º—ã–µ —Ñ—Ä–∞–∑—ã:\n"
            for phrase in custom_phrases:
                text += f"‚Ä¢ {phrase}\n"
            text += "\n"
        
        text += "üéâ –ì–æ—Ç–æ–≤–∞ —Å—Ç–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–π, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å!\n\n"
        text += "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
        
        buttons = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–∏–º–µ–Ω–∏—Ç—å!", callback_data="apply_personalization")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_personalization")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_personalization")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await state.set_state(PersonalizationStates.confirmation)
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@personalization_router.callback_query(F.data == "apply_personalization")
async def handle_apply_personalization(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏."""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    from db import save_personalization_settings
    
    personality_type = data.get('selected_personality', 'sweet')
    communication_style = data.get('selected_communication_style', 'casual')
    custom_traits = data.get('custom_traits', [])
    custom_phrases = data.get('custom_phrases', [])
    
    await save_personalization_settings(
        callback.from_user.id,
        personality_type,
        communication_style,
        custom_traits,
        custom_phrases
    )
    
    text = "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≠–ª–∏–∑–∏–∏\n\n"
    text += "üéâ –ì–æ—Ç–æ–≤–æ! –Ø –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!\n\n"
    text += "–í–∞—É! –Ø —á—É–≤—Å—Ç–≤—É—é, –∫–∞–∫ –º–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –º–µ–Ω—è–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ‚ú®\n\n"
    text += "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å:\n"
    text += "‚Ä¢ –° –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏ üíï\n"
    text += "‚Ä¢ –í —Ç–≤–æ–µ–º –ª—é–±–∏–º–æ–º —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è üí¨\n"
    text += "‚Ä¢ –° –æ—Å–æ–±—ã–º–∏ —á–µ—Ä—Ç–∞–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ üåü\n"
    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—è —Ç–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ñ—Ä–∞–∑—ã üí≠\n\n"
    text += "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é –º–µ–Ω—è! üòä\n\n"
    text += "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /personalize"
    
    buttons = [
        [InlineKeyboardButton(text="üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ", callback_data="start_chat")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await state.clear()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@personalization_router.callback_query(F.data == "back_to_personality")
async def handle_back_to_personality(callback: types.CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏."""
    await state.set_state(PersonalizationStates.choosing_personality)
    
    text = "üé≠ **–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏**\n\n"
    text += "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —É –º–µ–Ω—è –±—ã–ª?"
    
    keyboard_data = personalization_system.get_personality_keyboard_data()
    buttons = []
    
    for row in keyboard_data:
        button_row = []
        for text, callback_data in row:
            button_row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
        buttons.append(button_row)
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@personalization_router.callback_query(F.data == "back_to_style")
async def handle_back_to_style(callback: types.CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è."""
    await state.set_state(PersonalizationStates.choosing_communication_style)
    
    text = "üí¨ **–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è**\n\n"
    text += "–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å —Ç–æ–±–æ–π –æ–±—â–∞–ª–∞—Å—å?"
    
    keyboard_data = personalization_system.get_communication_style_keyboard_data()
    buttons = []
    
    for row in keyboard_data:
        button_row = []
        for text, callback_data in row:
            button_row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
        buttons.append(button_row)
    
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_personality"),
        InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_style")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@personalization_router.callback_query(F.data == "back_to_traits")
async def handle_back_to_traits(callback: types.CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞."""
    await state.set_state(PersonalizationStates.custom_traits)
    
    text = "‚úèÔ∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞**\n\n"
    text += "–ù–∞–ø–∏—à–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –º–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
    text += "‚Ä¢ –õ—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤\n"
    text += "‚Ä¢ –£–≤–ª–µ–∫–∞–µ—Ç—Å—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏–µ–π\n"
    text += "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º\n"
    text += "‚Ä¢ –û–±–æ–∂–∞–µ—Ç —à–æ–∫–æ–ª–∞–¥\n"
    text += "‚Ä¢ –ë–æ–∏—Ç—Å—è –ø–∞—É–∫–æ–≤\n\n"
    text += "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∫–∞–∂–¥—É—é —á–µ—Ä—Ç—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):"
    
    buttons = [
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_traits")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_style")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–æ–≤
@personalization_router.callback_query(F.data == "skip_style")
async def handle_skip_style(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è."""
    await state.update_data(selected_communication_style="casual")
    await handle_add_traits(callback, state)

@personalization_router.callback_query(F.data == "skip_traits")
async def handle_skip_traits(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞."""
    await state.update_data(custom_traits=[])
    await handle_add_phrases(callback, state)

@personalization_router.callback_query(F.data == "skip_phrases")
async def handle_skip_phrases(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑."""
    await state.update_data(custom_phrases=[])
    await show_confirmation(callback.message, state)

@personalization_router.callback_query(F.data == "edit_personalization")
async def handle_edit_personalization(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏."""
    await handle_back_to_personality(callback, state)

@personalization_router.callback_query(F.data == "cancel_personalization")
async def handle_cancel_personalization(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é."""
    await state.clear()
    await callback.message.edit_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /personalize")
    await callback.answer()
